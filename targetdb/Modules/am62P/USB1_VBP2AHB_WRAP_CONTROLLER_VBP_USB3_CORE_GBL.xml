<module name="USB1_VBP2AHB_WRAP_CONTROLLER_VBP_USB3_CORE_GBL" acronym="" XML_version="1.0" HW_revision="n/a" description="">
	<register id="VBP2AHB_WRAP__CONTROLLER_VBP__USB3_CORE_GBL_GSBUSCFG0" acronym="VBP2AHB_WRAP__CONTROLLER_VBP__USB3_CORE_GBL_GSBUSCFG0" offset="0x0" width="32" description="Global SoC Bus Configuration Register 0

This register configures system bus DMA options for the initiator bus, which may be configured as AHB, AXI, or Native. Options include burst length and cache type (bufferable/posted, cacheable/snoop, and so on). The application can program this register upon power-on, or a change in mode of operation after the DMA engine is halted.

xHCI Register Power-On Value:

If you are using a standard xHCI host driver, make sure to set the register's power-on value during coreConsultant configuration (DWC_USB3_GSBUSCFG0_INIT parameter) because the standard xHCI driver does not access this register.

For more details on this register, refer to the following sections:
 - Usage of Global SoC Bus Configuration Register 0 (GSBUSCFG0) section in the Programming Guide
 - System Bus Interface section in the Databook">
		<bitfield id="DATRDREQINFO" width="4" begin="31" end="28" resetval="0x0" description="DATRDREQINFO    AHB-prot/AXI-cache/OCP-ReqInfo for Data Read [DatRdReqInfo]   Input to BUS-GM." range="31 - 28" rwaccess="R/W"/> 
		<bitfield id="DESRDREQINFO" width="4" begin="27" end="24" resetval="0x0" description="DESRDREQINFO  AHB-prot/AXI-cache/OCP-ReqInfo for Descriptor Read [DesRdReqInfo].  Input to BUS-GM." range="27 - 24" rwaccess="R/W"/> 
		<bitfield id="DATWRREQINFO" width="4" begin="23" end="20" resetval="0x0" description="DATWRREQINFO  AHB-prot/AXI-cache/OCP-ReqInfo for Data Write [DatWrReqInfo].    Input to BUS-GM." range="23 - 20" rwaccess="R/W"/> 
		<bitfield id="DESWRREQINFO" width="4" begin="19" end="16" resetval="0x0" description="DESWRREQINFO  AHB-prot/AXI-cache/OCP-ReqInfo for Descriptor Write [DesWrReqInfo]   Input to BUS-GM." range="19 - 16" rwaccess="R/W"/> 
		<bitfield id="RESERVED" width="4" begin="15" end="12" resetval="0x0" description="Reserved for future use" range="15 - 12" rwaccess="N/A"/> 
		<bitfield id="DATBIGEND" width="1" begin="11" end="11" resetval="0x0" description="Data Access is Big Endian   This bit controls the endian mode for data accesses.  - Little-endian [default].   - Big-endian.  In big-endian mode, DMA access [both read and write] for packet data a Byte Invariant Big-Endian mode [see Little-Endian and Big-Endian section  in the User Guide].  Note: Since AXI requires byte invariant endianness, setting DescBigend and DatBigEnd to one causes an address invariant transform to be applied, which is not appropriate. See section 9.3 and 9.4 of the AMBA AXI Specification. Hence for an AXI initiator [DWC_USB3_MBUS_TYPE=1], this bit must be set to zero." range="11" rwaccess="R/W"/> 
		<bitfield id="DESBIGEND" width="1" begin="10" end="10" resetval="0x0" description="Descriptor Access is Big Endian  This bit controls the endian mode for descriptor accesses.  - Little-endian [default]  - Big-endian  In big-endian mode, DMA access [both read and write] for descriptors uses a Byte Invariant Big-Endian mode [see Little-Endian and Big-Endian section  in the User Guide.   Data is considered as 'embedded data' in the descriptors in the following cases:   - Device mode: The buffer pointer of a Setup TRB points to the Setup TRB itself.  - Host mode: The Immediate Data [IDT] bit in a Transfer TRB is set to 1. In device mode, if the system uses different endian modes for descriptor and data, software must not use 'embedded' data.  In host mode, if the system uses different endian modes for data and descriptors, the controller treats 'embedded data' as descriptor [not as data] in terms of endian mode handling. If this is not the expectation of the system, the software must manipulate the 'embedded data' accordingly.  Note: Since AXI requires byte invariant endianness, setting DescBigend and DatBigEnd to one causes an address invariant transform to be applied, which is not appropriate. See section 9.3 and 9.4 of the AMBA AXI Specification. Hence for an AXI initiator [DWC_USB3_MBUS_TYPE=1], this bit must be set to zero." range="10" rwaccess="R/W"/> 
		<bitfield id="INCR256BRSTENA" width="1" begin="7" end="7" resetval="0x0" description="INCR256 Burst Type Enable  Input to BUS-GM.   For the AHB/AXI configuration, if software set this bit to 1, the AHB/AXI initiator uses INCR to do the 256-beat burst." range="7" rwaccess="R/W"/> 
		<bitfield id="INCR128BRSTENA" width="1" begin="6" end="6" resetval="0x0" description="INCR128 Burst Type Enable  Input to BUS-GM.  For the AHB/AXI configuration, if software set this bit to 1, the AHB/AXI initiator uses INCR to do the 128-beat burst." range="6" rwaccess="R/W"/> 
		<bitfield id="INCR64BRSTENA" width="1" begin="5" end="5" resetval="0x0" description="INCR64 Burst Type Enable  - Input to BUS-GM.  For the AHB/AXI configuration, if software set this bit to 1, the AHB/AXI initiator uses INCR to do the 64-beat burst." range="5" rwaccess="R/W"/> 
		<bitfield id="INCR32BRSTENA" width="1" begin="4" end="4" resetval="0x0" description="INCR32 Burst Type Enable  Input to BUS-GM. For the AHB/AXI configuration, if software set this bit to 1, the AHB/AXI initiator uses INCR to do the 32-beat burst." range="4" rwaccess="R/W"/> 
		<bitfield id="INCR16BRSTENA" width="1" begin="3" end="3" resetval="0x0" description="INCR16 Burst Type Enable  Input to BUS-GM. For the AHB/AXI configuration, if software set this bit to '1', the AHB/AXI initiator uses INCR to do the 16-beat burst." range="3" rwaccess="R/W"/> 
		<bitfield id="INCR8BRSTENA" width="1" begin="2" end="2" resetval="0x1" description="INCR8 Burst Type Enable  Input to BUS-GM. For the AHB/AXI configuration, if software set this bit to 1, the AHB/AXI initiator uses INCR to do the 8-beat burst." range="2" rwaccess="R/W"/> 
		<bitfield id="INCR4BRSTENA" width="1" begin="1" end="1" resetval="0x1" description="INCR4 Burst Type Enable  Input to BUS-GM. For the AXI configuration, when this bit is enabled the controller is allowed to do bursts of beat length 1, 2, and 4. It is highly recommended that this bit is enabled to prevent descriptor reads and writes from being broken up into separate transfers." range="1" rwaccess="R/W"/> 
		<bitfield id="INCRBRSTENA" width="1" begin="0" end="0" resetval="0x0" description="Undefined Length INCR Burst Type Enable [INCRBrstEna]  Input to BUS-GM. This bit determines the set of burst lengths the initiator interface uses. It works in conjunction with the GSBUSCFG0[7:1] enables [INCR256/128/64/32/16/8/4].  0: INCRX burst mode  HBURST [for AHB configurations] and ARLEN/AWLEN [for AXI configurations] do not use INCR except in case of non-aligned burst transfers. In the case of address-aligned transfers, they use only the following burst lengths:  - 1  - 2, 4 [if GSBUSCFG0.INCR4BrstEna = 1]  - 8 [if GSBUSCFG0.INCR8BrstEna = 1]  - 16 [if GSBUSCFG0.INCR16BrstEna = 1]  - 32 [if GSBUSCFG0.INCR32BrstEna = 1]  - 64 [if GSBUSCFG0.INCR64BrstEna = 1]  - 128 [if GSBUSCFG0.INCR128BrstEna = 1]  - 256 [if GSBUSCFG0.INCR256BrstEna = 1] Note:   - In case of non-address-aligned transfers, INCR may get generated at the beginning and end of the transfers to align the address boundaries, even though INCR is disabled.  - In AHB mode, if INCRX burst mode is enabled, but none of the supported INCRx bursts bits are enabled, then the controller will perform [undefined length] INCR bursts. 1: INCR [undefined length] burst mode  - AHB configurations: HBURST uses SINGLE or INCR of any length with handling 1KB boundary breakup.  - AXI configurations: ARLEN/AWLEN uses any length less than or equal to the largest-enabled burst length of INCR32/64/128/256. For cache line-aligned applications, this bit is typically set to 0 to ensure that the initiator interface uses only power-of-2 burst lengths [as enabled via GSBUSCFG0[7:0]]." range="0" rwaccess="R/W"/>
	</register>
	<register id="VBP2AHB_WRAP__CONTROLLER_VBP__USB3_CORE_GBL_GSBUSCFG1" acronym="VBP2AHB_WRAP__CONTROLLER_VBP__USB3_CORE_GBL_GSBUSCFG1" offset="0x4" width="32" description="Global SoC Bus Configuration Register 1

xHCI Register Power-On Value:

If you are using a standard xHCI host driver, make sure to set the register's power-on value during coreConsultant configuration (DWC_USB3_GSBUSCFG1_INIT parameter) because the standard xHCI driver does not access this register.

For more details on this register, refer to System Bus Interface section in the Databook.">
		<bitfield id="EN1KPAGE" width="1" begin="12" end="12" resetval="0x0" description="1k Page Boundary Enable  By default [this bit is disabled] the AXI breaks transfers at the 4k page boundary. When this bit is enabled, the AXI initiator [DMA data] breaks transfers at the 1k page boundary." range="12" rwaccess="R/W"/> 
		<bitfield id="PIPETRANSLIMIT" width="4" begin="11" end="8" resetval="0x3" description="AXI Pipelined Transfers Burst Request Limit  The field controls the number of outstanding pipelined transfer requests the AXI initiator pushes to the AXI target.   When the AXI initiator reaches this limit, it does not make any more requests on the AXI ARADDR and AWADDR buses until the associated data phases complete.  This field is encoded as follows:  - 'h0: 1 request  - 'h1: 2 requests  - 'h2: 3 requests  - 'h3: 4 requests  -  ...  - 'hF: 16 requests" range="11 - 8" rwaccess="R/W"/>
	</register>
	<register id="VBP2AHB_WRAP__CONTROLLER_VBP__USB3_CORE_GBL_GTXTHRCFG" acronym="VBP2AHB_WRAP__CONTROLLER_VBP__USB3_CORE_GBL_GTXTHRCFG" offset="0x8" width="32" description="Global Tx Threshold Control Register

For more information on
 - Using this register, refer to Packet Threshold and Burst Features for High Latency Systems section in the Databook.
 - Selecting values for the fields of this register, see the TX/RX Data FIFO Sizes and TX/RX Threshold Control Register Settings section in the User Guide.
Note:
 - GTXTHRCFG register is not applicable for Debug Target.
 - GTXTHRCFG register is not applicable in USB 2.0-only mode.">
		<bitfield id="USBTXPKTCNTSEL" width="1" begin="29" end="29" resetval="0x0" description="USB Transmit Packet Count Enable  This field enables/disables the USB transmission multi-packet thresholding:  - 0: USB transmission multi-packet thresholding is disabled. the controller can start transmission on the USB after the entire [one full] packet has been fetched into the corresponding TXFIFO.  - 1: USB transmission multi-packet thresholding is enabled. The controller can only start transmission on the USB after USB Transmit Packet Count amount of packets for the USB transaction [burst] are already in the corresponding TXFIFO. This mode is valid in both host and device modes. It is only used for SuperSpeed operation." range="29" rwaccess="R/W"/> 
		<bitfield id="USBTXPKTCNT" width="4" begin="27" end="24" resetval="0x0" description="USB Transmit Packet Count  This field specifies the number of packets that must be in the TXFIFO before the controller can start transmission for the corresponding USB transaction [burst]. This field is only valid when the USB Transmit Packet Count Enable field is set to one. Valid values are from 1 to 15.  Note:  - In device mode, if device controller does not have the TRBs for the number of packets or if it cannot fetch the TRBs because of high latency or switching between other endpoints, then it does not wait for the threshold number of packets. The threshold number of packets will be honored only when the TRBs are available in the controller for the number of packets before it starts the data fetch.  -  This field must be less than or equal to the USB Maximum TX Burst Size field." range="27 - 24" rwaccess="R/W"/> 
		<bitfield id="USBMAXTXBURSTSIZE" width="8" begin="23" end="16" resetval="0x0" description="USB Maximum TX Burst Size   When UsbTxPktCntSel is one, this field specifies the Maximum Bulk OUT burst the controller can do. When the system bus is slower than the USB, TX FIFO can underrun during a long burst. User can program a smaller value to this field to limit the TX burst size that the controller can do.    Host mode: It only applies to SS Bulk, Isochronous, and Interrupt OUT endpoints.    Device mode: This value is not used in device mode, but users need to program a value when using the TX threshold feature to make sure that the value programmed in UsbTxPktCnt is less than this value.  Valid values are from 1 to 16." range="23 - 16" rwaccess="R/W"/> 
		<bitfield id="RESERVED" width="1" begin="15" end="15" resetval="0x0" description="Reserved_15" range="15" rwaccess="N/A"/> 
		<bitfield id="RESERVED" width="1" begin="14" end="14" resetval="0x0" description="Reserved1[Rsvd/Rs]  Register field must write only 0 by the application. The read value must be treated as X [unknown]." range="14" rwaccess="N/A"/> 
		<bitfield id="RESERVED" width="3" begin="13" end="11" resetval="0x0" description="Reserved [Rsvd/Rs]   The register field must write only 0 by the application. The read value must be treated as X [unknown]." range="13 - 11" rwaccess="N/A"/> 
		<bitfield id="RESERVED" width="11" begin="10" end="0" resetval="0x0" description="Reserved for future use" range="10 - 0" rwaccess="N/A"/>
	</register>
	<register id="VBP2AHB_WRAP__CONTROLLER_VBP__USB3_CORE_GBL_GRXTHRCFG" acronym="VBP2AHB_WRAP__CONTROLLER_VBP__USB3_CORE_GBL_GRXTHRCFG" offset="0xC" width="32" description="Global Rx Threshold Control Register

In a normal case, a Tx burst starts as soon as one packet is prefetched. an Rx burst starts as soon as 1-packet space is available. This works well as long as the system bus is faster than the USB 3.0 bus (a 1024-bytes packet takes ~2.2 microseconds on the USB bus in SS mode). 

If the system bus latency is larger than 2.2 microseconds to access a 1024-byte packet, then starting a burst on 1-packet condition leads to an early abort of the burst causing unnecessary performance reduction.  

To avoid underrun and overrun during the burst, in a high-latency bus system (like USB), threshold and burst size control is provided through GTXTHRCFG and GRXTHRCFG registers. Bit [29] of the GTXTHRCFG and GRXTHRCFG registers enables this feature.

For more information on
 - Using this register, refer to Packet Threshold and Burst Features for High Latency Systems section in the Databook.
 - Selecting values for the fields of this register, see the TX/RX Data FIFO Sizes and TX/RX Threshold Control Register Settings section in the User Guide.
Note:
 - GRXTHRCFG register is not applicable for Debug Target.
 - There is an issue when ACK TP with NumP=0 followed by ACK TP with NumP=1 without ERDY TP sent by the device controller during a burst bulk OUT transfer. This may cause third-party USB 3.0 host controllers to keep waiting for the ERDY TP.
The USB 3.0 specification states that When an endpoint is not in a flow control condition, it shall not send an ERDY TP unless the endpoint is a Bulk endpoint that supports streams. In this case, after the device sent the ACK TP (nump=1), the endpoint was not in the flow control, so it did not send an ERDY.
The device would have sent ERDY if the next OUT packet was not received. When the next OUT packet was received, at that time there was enough buffer space to accept it, so the device accepted the packet by informing host that it is not no longer in the flow control. The Host should wait for the responses for all the OUT packets to return and then decide if the endpoint is still in flow control or not.
The USB 3.1 specification supersedes all the USB 3.0 specification. The errata states that If the host continues, or resumes, transactions to an endpoint, the endpoint shall re-evaluate its flow control state and respond appropriately. However, there are no ECNs on the USB 3.0 for this issue.
To work around this issue, the Global Rx Threshold mode must be disable by setting GRXTHRCFG.UsbRxPktCntSel=0. Instead, software can program the DCFG.NUMP mode (where fixed NUMP is transmitted always) instead of the RX threshold based nump mode to prevent the device from sending ACK TP with NumP=0. The NUMP in the ACK TP is the minimum value of (DCFG.NUMP, bMaxBurstSize) for each endpoint.">
		<bitfield id="USBRXPKTCNTSEL" width="1" begin="29" end="29" resetval="0x0" description="USB Receive Packet Count Enable  This field enables/disables the USB reception multi-packet thresholding:  - 0: The controller can only start reception on the USB when the RX FIFO has space for at least one packet.  - 1: The controller can only start reception on the USB when the RX FIFO has space for at least UsbRxPktCnt amount of packets. This mode is valid in both host and device mode. It is only used for SuperSpeed.  In device mode,   - Setting this bit to 1 also enables the functionality of reporting NUMP in the ACK TP based on the RX FIFO space instead of reporting a fixed NUMP derived from DCFG.NUMP for non-control endpoints.  - If you are using external buffer control [EBC] feature, disable this mode by setting UsbRxPktCntSel to 0." range="29" rwaccess="R/W"/> 
		<bitfield id="USBRXPKTCNT" width="4" begin="27" end="24" resetval="0x0" description="USB Receive Packet Count  In host mode, this field specifies the space [in terms of the number of packets] that must be available in the RX FIFO before the controller can start the corresponding USB RX transaction [burst].   In device mode, this field specifies the space [in terms of the number of packets] that must be available in the RX FIFO before the controller can send ERDY for a flow-controlled endpoint.  This field is valid only when the USB Receive Packet Count Enable field is set to 1. The valid values for this field are from 1 to 15.   Note: This field must be less than or equal to the USB Maximum Receive Burst Size field." range="27 - 24" rwaccess="R/W"/> 
		<bitfield id="USBMAXRXBURSTSIZE" width="5" begin="23" end="19" resetval="0x0" description="USB Maximum Receive Burst Size  In host mode, this field specifies the Maximum Bulk IN burst the DWC_usb3 controller can perform.   When the system bus is slower than the USB, RX FIFO can overrun during a long burst.   You can program a smaller value to this field to limit the RX burst size that the controller can perform. It only applies to SS Bulk, Isochronous, and Interrupt IN endpoints in the host mode.   In device mode, this field specifies the NUMP value that is sent in ERDY for an OUT endpoint. The programmed value should not exceed the RXFIFO size.  This field is valid only when UsbRxPktCntSel is one. The valid values for this field are from 1 to 16." range="23 - 19" rwaccess="R/W"/> 
		<bitfield id="RESVISOCOUTSPC" width="13" begin="12" end="0" resetval="0x0" description="Space reserved in Rx FIFO for ISOC OUT  In host mode, this field is not applicable and must be programmed to 0.   In device mode, this value represents the amount of space to be reserved for ISOC OUT packets.   The value to be programmed should be chosen so as to ensure that non ISOC packets are not completely dropped.   If no space needs to be reserved for ISOC OUT packets, program this field to 0.  This field is valid only in device mode. The maximum configurable depth of RX FIFO is 8192. Therefore, this field is 13 bits wide.  The value of space reserved is in terms of DWC_USB3_MDWIDTH.  For SS, the space reservation is always rounded off to the nearest packet boundary. Therefore, it is always recommended to program a value corresponding to MPS or its multiples.  For HS/FS, the space reservation is the actual value.  Note: For SS, reserve space for ISOC when the Rx FIFO space can accommodate two MPS or more. Otherwise, this may result in degraded performance for non-ISOC packets. If the space is entirely allocated for ISOC, the non-ISOC packets will be completely dropped. To help you decide during the time of configuring the controller, refer to the Device-Mode Receive Path section in the Databook." range="12 - 0" rwaccess="R/W"/>
	</register>
	<register id="VBP2AHB_WRAP__CONTROLLER_VBP__USB3_CORE_GBL_GCTL" acronym="VBP2AHB_WRAP__CONTROLLER_VBP__USB3_CORE_GBL_GCTL" offset="0x10" width="32" description="Global Core Control Register

Refer to &#38;#60;workspace>/src/DWC_usb3_params.v for details on DWC_USB3_GCTL_INIT.

Note: 

When Hibernation is not enabled, you can write any value to GblHibernationEn. It always returns 0 when read.">
		<bitfield id="PWRDNSCALE" width="13" begin="31" end="19" resetval="0x0" description="Power Down Scale [PwrDnScale]  The USB3 suspend_clk input replaces pipe3_rx_pclk as a clock source to a small part of the USB3 controller that operates when the SS PHY is in its lowest power [P3] state, and therefore does not provide a clock.  The Power Down Scale field specifies how many suspend_clk periods fit into a 16 kHz clock period. When performing the division, round up the remainder.  For example, when using an 8-bit/16-bit/32-bit PHY and 25-MHz Suspend clock,  Power Down Scale = 25000 kHz/16 kHz = 13'd1563 [rounder up]  Note:  - Minimum Suspend clock frequency is 32 kHz  - Maximum Suspend clock frequency is 125 MHz The LTSSM uses Suspend clock for 12-ms and 100-ms timers during suspend mode. According to the USB 3.0 specification, the accuracy on these timers is 0% to +50%.  - 12 ms + 0~+50% accuracy = 18 ms [Range is 12 ms - 18 ms]  - 100 ms + 0~+50% accuracy = 150 ms [Range is 100 ms - 150 ms]. The suspend clock accuracy requirement is:  - [12,000/62.5] * [GCTL[31:19]] * actual suspend_clk_period must be between 12,000 and 18,000  - [100,0000/62.5] * [GCTL[31:19]] * actual suspend_clk_period must be between 100,000 and 150,000 For example, if your suspend_clk frequency varies from 7.5 MHz to 10.5MHz, then the value needs to programmed is:  Power Down Scale = 10500/16 = 657 [rounded up. and fastest frequency used]." range="31 - 19" rwaccess="R/W"/> 
		<bitfield id="MASTERFILTBYPASS" width="1" begin="18" end="18" resetval="0x0" description="Initiator Filter Bypass  When this bit is set to 1'b1, irrespective of the parameter DWC_USB3_EN_BUS_FILTERS chosen, all the filters in the DWC_usb3_filter module are bypassed.    The double synchronizers to mac_clk preceding the filters are also bypassed. For enabling the filters, this bit must be 1'b0." range="18" rwaccess="R/W"/> 
		<bitfield id="BYPSSETADDR" width="1" begin="17" end="17" resetval="0x0" description="Bypass SetAddress in Device Mode.    When BYPSSETADDR bit is set, the device controller uses the value in the DCFG[DevAddr] bits directly for comparing the device address in the tokens.   For simulation, you can use this feature to avoid sending an actual SET ADDRESS control transfer on the USB, and make the device controller respond to a new address.  When the xHCI Debug capability is enabled and this bit is set, the Debug Target immediately enters the configured state without requiring the Debug Host to send a SetAddress or SetConfig request.  Note: You can set this bit for simulation purposes only. In the actual hardware, this bit must be set to 1'b0." range="17" rwaccess="R/W"/> 
		<bitfield id="U2RSTECN" width="1" begin="16" end="16" resetval="0x0" description="U2RSTECN  If the SuperSpeed connection fails during POLL or LMP exchange, the device connects at non-SS mode.   If this bit is set, then device attempts three more times to connect at SS, even if it previously failed to operate in SS mode. For each attempt, the device checks receiver termination eight times.  From 2.60a release, this bit controls whether to check for Rx.Detect eight times or one time for every attempt. Device controller on USB 2.0 reset checks for receiver termination eight times per attempt if this bit is set to zero, or only once per attempt if the bit is set to one.  Note: This bit is applicable only in device mode." range="16" rwaccess="R/W"/> 
		<bitfield id="FRMSCLDWN" width="2" begin="15" end="14" resetval="0x0" description="FRMSCLDWN  This field scales down device view of a SOF/USOF/ITP duration.  For SS/HS mode:  - Value of 2'h3 implements interval to be 15.625 us  - Value of 2'h2 implements interval to be 31.25 us  - Value of 2'h1 implements interval to be 62.5 us  - Value of 2'h0 implements interval to be 125us For FS mode, the scale-down value is multiplied by 8.  When xHCI Debug Capability is enabled, this field also scales down the MaxPacketSize of the IN and OUT bulk endpoint to allow more traffic during simulation. It can only be changed from a non-zero value during simulation.   - 2'h0: 1024 bytes  - 2'h1: 512 bytes  - 2'h2: 256 bytes  - 2'h3: 128 bytes" range="15 - 14" rwaccess="R/W"/> 
		<bitfield id="PRTCAPDIR" width="2" begin="13" end="12" resetval="0x2" description="PRTCAPDIR: Port Capability Direction [PrtCapDir]  - 2'b01: for Host configurations  - 2'b10: for Device configurations Note: For static Host-only/Device-only applications, use DRD Host or DRD Device mode. The combination of GCTL.PrtCapDir=2'b11 with SRP and HNP/RSP disabled is not recommended for these applications.  The sequence for switching modes in DRD configuration is as follows:   Switching from Device to Host:  1. Reset the controller using GCTL[11] [CoreSoftReset].  2. Set GCTL[13:12] [PrtCapDir] to 2'b01 [Host mode].  3. Reset the host using USBCMD.HCRESET.  4. Follow the steps in Initializing Host Registers section of the Programming Guide.  Switching from Host to Device:  1. Reset the controller using GCTL[11] [CoreSoftReset].  2. Set GCTL[13:12] [PrtCapDir] to 2'b10 [Device mode].  3. Reset the device by setting DCTL[30] [CSftRst].   4. Follow the steps in Register Initialization section of the Programming Guide.  Programming this field with random data causes the controller to keep toggling between the host mode and the device mode . Bit Bash register testing is not recommended." range="13 - 12" rwaccess="R/W"/> 
		<bitfield id="CORESOFTRESET" width="1" begin="11" end="11" resetval="0x0" description="Core Soft Reset [CoreSoftReset]  - 1'b0 - No soft reset  - 1'b1 - Soft reset to controller Clears the interrupts and all the CSRs except the following registers:  - GCTL  - GUCTL  - GSTS  - GSNPSID  - GGPIO  - GUID  - GUSB2PHYCFGn registers  - GUSB3PIPECTLn registers  - DCFG  - DCTL  - DEVTEN  - DSTS When you reset PHYs [using GUBS3PHYCFG or GUSB3PIPECTL registers], you must keep the controller in reset state until PHY clocks are stable. This controls the bus, ram, and mac domain resets. Refer to the Reset Generation section in the Databook.  Note: This bit is for debug purposes only. Use USBCMD.HCRESET in xHCI Mode and DCTL.SoftReset in device mode for soft reset.   Programming this field with random data will reset the internal logic of the host controller. Due to this side effect Bit Bash register testing is not recommended." range="11" rwaccess="R/W"/> 
		<bitfield id="SOFITPSYNC" width="1" begin="10" end="10" resetval="0x0" description="SOFITPSYNC  If this bit is set to '0' operating in host mode, the controller keeps the UTMI/ULPI PHY on the first port in a non-suspended state whenever there is a SuperSpeed port that is not in Rx.Detect, SS.Disable and U3.   If this bit is set to '1' operating in host mode, the controller keeps the UTMI/ULPI PHY on the first port in a non-suspended state whenever the other non-SuperSpeed ports are not in a suspended state. This feature is useful because it saves power by suspending UTMI/ULPI when SuperSpeed only is active, and it helps resolve when the PHY does not transmit a host resume unless it is placed in suspend state. This bit must be programmed as a part of initialization at power-on reset, and must not be dynamically changed afterwards.   Note:  - USB2PHYCFGn[6].PhySusp eventually decides to put the UTMI/ULPI PHY in to suspend state. In addition, when this bit is set to '1', the controller generates ITP from the ref_clk based counter. Otherwise, ITP and SOF are generated from utmi/ulpi_clk[0] based counter. To program the reference clock period inside the controller, refer to GUCTL[31:22].REFCLKPER.  - This feature is valid in Host and DRD configurations and used only in Host mode operation.  - If you never use this feature or the GFLADJ.GFLADJ_REFCLK_LPM_SEL, the minimum frequency for the ref_clk can be as low as 32KHz. You can connect the suspend_clk [as low as 32 KHz] to the ref_clk.  - If you plan to enable hardware-based LPM or software-based LPM [PORTPMSC. HLE=1], then you cannot use this feature. Turn off this feature by setting this bit to '0' and use the GFLADJ.GFLADJ_REFCLK_LPM_SEL feature.  - If you set this bit to '1', the GUSB2PHYCFG.U2_FREECLK_EXISTS bit and the DWC_USB3_FREECLK_USB2_EXIST parameter must be set to '0'. Program this bit to 0 if the controller is intended to be operated in USB 3.0 mode." range="10" rwaccess="R/W"/> 
		<bitfield id="U1U2TIMERSCALE" width="1" begin="9" end="9" resetval="0x0" description="Disable U1/U2 timer Scaledown [U1U2TimerScale].   If set to '1' along with GCTL[5:4] [ScaleDown] = 2'bX1, disables the scale down of U1/U2 inactive timer values. This is for simulation mode only." range="9" rwaccess="R/W"/> 
		<bitfield id="DEBUGATTACH" width="1" begin="8" end="8" resetval="0x0" description="Debug Attach  When this bit is set,   - SS Link proceeds directly to the Polling link state [after RUN/STOP in the DCTL register is asserted] without checking remote termination.   - Link LFPS polling timeout is infinite.  - Polling timeout during TS1 is infinite [in case link is waiting for TXEQ to finish]." range="8" rwaccess="R/W"/> 
		<bitfield id="RAMCLKSEL" width="2" begin="7" end="6" resetval="0x0" description="RAM Clock Select [RAMClkSel]  - 2'b00: bus clock  - 2'b01: pipe clock [Only used in device mode]  - 2'b10: In device mode , pipe/2 clock.In Host mode, controller switches ram_clk between pipe/2 clock, mac2_clk and bus_clk based on the status of the U2/U3 ports  - 2'b11: In device mode, selects mac2_clk as ram_clk [when 8-bit UTMI or ULPI used. Not supported in 16-bit UTMI mode] In Host mode, controller switches ram_clk between pipe_clk, mac2_clk and bus_clk based on the status of the U2/U3 ports.  In device mode, upon a USB reset and USB disconnect, the hardware clears these bits to 2'b00. For more information on how to select the RAM clock, see the Clock Generation and Clock Tree Synthesis [CTS] Requirements section in the Databook.    Note:  - In device mode, if you set RAMClkSel to 2'b11 [mac2_clk], the controller internally switches the ram_clk to bus_clk when the link state changes to Suspend [L2 or L3], and switches the ram_clk back to mac2_clk when the link state changes to resume or U2.  - In host mode, if a value of 2/3 is chosen, then controller switches ram_clk between bus_clk, mac2_clk and pipe_clk, pipe_clk/2, based on the state of the U2/U3 ports. For example, if only the U2 port is active and the U3 ports are suspended, then the ram_clk is switched to mac2_clk. When only the U3 ports are active and the U2 ports are suspended, the controller internally switches the ram_clk to pipe3 clock and when all U2 and U3 ports are suspended, it switches the ram_clk to bus_clk. This allows decoupling the ram_clk from the bus_clk, and depending on the bandwidth requirement allows the bus_clk to be run at a lower frequency than the ram_clk requirements. The bus_clk frequency still cannot be less than 60MHz in host mode, and this is not verified. A value of 2 can be chosen only if the pipe data width is 8 or 16 bits. In this case the when the ram_clk is switched to pipe_clk, it uses pipe_clk/2 instead of pipe_clk. If a value of 3 is chosen for RAMClkSel, then when ram_clk is switched to pipe_clk, then pipe_clk is used without any divider.   - In device mode, when RAMClkSel != 2'b00, the bus_clk_early frequency can be a minimum of 1 MHz. This is tested in simulation and also in hardware with Linux, Microsoft Windows 8, and MCCI Windows7 host drivers. Only control and non periodic transfers are supported when bus_clk is 1 MHz. For periodic applications, the bus_clk_early minimum frequency is higher depending on your application and SoC bus. Even though 1 MHz has been tested with standard host drivers, Synopsys recommends 5 MHz minimum for ASIC designs to provide a margin or at least have a backup option to increase the bus_clk frequency to 5 MHz if needed. Programming this field with random data will cause side effect. Bit Bash register testing is not recommended." range="7 - 6" rwaccess="R/W"/> 
		<bitfield id="SCALEDOWN" width="2" begin="5" end="4" resetval="0x0" description="Scale-Down Mode [ScaleDown]  When Scale-Down mode is enabled for simulation, the controller uses scaled-down timing values, resulting in faster simulations.  When Scale-Down mode is disabled, actual timing values are used. This is required for hardware operation.  HS/FS/LS Modes  - 2'b00: Disables all scale-downs. Actual timing values are used.  - 2'b01: Enables scale-down of all timing values except Device mode suspend and resume. These include Speed enumeration, HNP/SRP, and Host mode suspend and resume  - 2'b10: Enables scale-down of Device mode suspend and resume timing values only.  - 2'b11: Enables bit 0 and bit 1 scale-down timing values. SS Mode  - 2'b00: Disables all scale-downs. Actual timing values are used.  - 2'b01: Enables scaled down SS timing and repeat values including: [1] Number of TxEq training sequences reduce to 8. [2] LFPS polling burst time reduce to 256 nS. [3] LFPS warm reset receive reduce to 30 uS. Refer to the rtl_vip_scaledown_mapping.xls file under &#38;#60;workspace>/sim/SoC_sim directory for the complete list.  - 2'b10: No TxEq training sequences are sent. Overrides Bit 4.  - 2'b11: Enables bit 0 and bit 1 scale-down timing values." range="5 - 4" rwaccess="R/W"/> 
		<bitfield id="DISSCRAMBLE" width="1" begin="3" end="3" resetval="0x0" description="Disable Scrambling [DisScramble]   Transmit request to Link Partner on next transition to Recovery or Polling." range="3" rwaccess="R/W"/> 
		<bitfield id="U2EXIT_LFPS" width="1" begin="2" end="2" resetval="0x0" description="U2EXIT_LFPS  If this bit is,  - 0: the link treats 248ns LFPS as a valid U2 exit.   - 1: the link waits for 8us of LFPS before it detects a valid U2 exit. This bit is added to improve interoperability with a third-party host/device controller. This host/device controller in U2 state while performing receiver detection generates an LFPS glitch of about 4ms duration. This causes the host/device to exit from U2 state because the LFPS filter value is 248ns. With the new functionality enabled, the host/device can stay in U2 while ignoring this glitch from the host/device controller.  This bit is applicable for both host and device controller.   This bit is added to improve interoperability with a third party host controller. This host controller in U2 state while performing receiver detection generates an LFPS glitch of about 4ms duration. This causes the device to exit from U2 state because the LFPS filter value is 248ns. With the new functionality enabled, the device can stay in U2 while ignoring this glitch from the host controller." range="2" rwaccess="R/W"/> 
		<bitfield id="GBLHIBERNATIONEN" width="1" begin="1" end="1" resetval="0x0" description="GblHibernationEn  This bit enables hibernation at the global level. If hibernation is not enabled through this bit, the PMU immediately accepts the D0->D3 and D3->D0 power state change requests, but does not save or restore any controller state.  In addition, the PMUs never drive the PHY interfaces and let the controller continue to drive the PHY interfaces." range="1" rwaccess="R"/> 
		<bitfield id="DSBLCLKGTNG" width="1" begin="0" end="0" resetval="0x1" description="Disable Clock Gating [DsblClkGtng]  This bit is set to 1 and the controller is in Low Power mode, internal clock gating is disabled.  You can set this bit to 1'b1 after Power On Reset." range="0" rwaccess="R/W"/>
	</register>
	<register id="VBP2AHB_WRAP__CONTROLLER_VBP__USB3_CORE_GBL_GPMSTS" acronym="VBP2AHB_WRAP__CONTROLLER_VBP__USB3_CORE_GBL_GPMSTS" offset="0x14" width="32" description="Global Power Management Status Register

This debug register gives information on which event caused the hibernation exit. It provides internal status and state machine information, and is for Synopsys use only for debugging purposes.

This register is not applicable in USB 2.0-only mode.">
		<bitfield id="PORTSEL" width="4" begin="31" end="28" resetval="0x0" description="Global Power Management Status Register, PortSel  This field selects the port number." range="31 - 28" rwaccess="W"/> 
		<bitfield id="U3WAKEUP" width="5" begin="16" end="12" resetval="0x0" description="U3Wakeup  This field gives the following USB 3.0 port wakeup conditions:   - Bit [12]: Overcurrent Detected  - Bit [13]: Resume Detected  - Bit [14]: Connect Detected  - Bit [15]: Disconnect Detected  - Bit [16]: Last Connection State" range="16 - 12" rwaccess="R"/> 
		<bitfield id="U2WAKEUP" width="10" begin="9" end="0" resetval="0x0" description="U2Wakeup  This field indicates the following USB 2.0 port wakeup conditions:   - Bit [0]: Overcurrent Detected  - Bit [1]: Resume Detected  - Bit [2]: Connect Detected  - Bit [3]: Disconnect Detected  - Bit [4]: Last Connection State  - Bit [5]: ID Change Detected  - Bit [6]: SRP Request Detected  - Bit [7]: ULPI Interrupt Detected  - Bit [8]: USB Reset Detected  - Bit [9]: Resume Detected Changed" range="9 - 0" rwaccess="R"/>
	</register>
	<register id="VBP2AHB_WRAP__CONTROLLER_VBP__USB3_CORE_GBL_GSTS" acronym="VBP2AHB_WRAP__CONTROLLER_VBP__USB3_CORE_GBL_GSTS" offset="0x18" width="32" description="Global Status Register">
		<bitfield id="CBELT" width="12" begin="31" end="20" resetval="0x2024" description="Current BELT Value  In Host mode, this field indicates the minimum value of all received device BELT values and the BELT value that is set by the Set Latency Tolerance Value command." range="31 - 20" rwaccess="R"/> 
		<bitfield id="SSIC_IP" width="1" begin="11" end="11" resetval="0x0" description="This field is not used." range="11" rwaccess="R"/> 
		<bitfield id="OTG_IP" width="1" begin="10" end="10" resetval="0x0" description="This field is not used." range="10" rwaccess="R"/> 
		<bitfield id="BC_IP" width="1" begin="9" end="9" resetval="0x0" description="Battery Charger Interrupt Pending  This field indicates that there is a pending interrupt pertaining to BC in BCEVT register." range="9" rwaccess="R"/> 
		<bitfield id="ADP_IP" width="1" begin="8" end="8" resetval="0x0" description="This field is not used." range="8" rwaccess="R"/> 
		<bitfield id="HOST_IP" width="1" begin="7" end="7" resetval="0x0" description="Host Interrupt Pending:  This field indicates that there is a pending interrupt pertaining to xHC in the Host event queue." range="7" rwaccess="R"/> 
		<bitfield id="DEVICE_IP" width="1" begin="6" end="6" resetval="0x0" description="Device Interrupt Pending  This field indicates that there is a pending interrupt pertaining to peripheral [device] operation in the Device event queue." range="6" rwaccess="R"/> 
		<bitfield id="CSRTIMEOUT" width="1" begin="5" end="5" resetval="0x0" description="CSR Timeout  When this bit is 1'b1, it indicates that the software performed a write or read to a controller register that could not be completed within DWC_USB3_CSR_ACCESS_TIMEOUT bus clock cycles [default: h1FFFF]." range="5" rwaccess="R/W1TC"/> 
		<bitfield id="BUSERRADDRVLD" width="1" begin="4" end="4" resetval="0x0" description="Bus Error Address Valid [BusErrAddrVld]  Indicates that the GBUSERRADDR register is valid and reports the first bus address that encounters a bus error.  Note: Only supported in AHB and AXI configurations." range="4" rwaccess="R/W1TC"/> 
		<bitfield id="CURMOD" width="2" begin="1" end="0" resetval="0x0" description="Current Mode of Operation [CurMod]  Indicates the current mode of operation:  - 2'b00: Device mode  - 2'b01: Host mode " range="1 - 0" rwaccess="R"/>
	</register>
	<register id="VBP2AHB_WRAP__CONTROLLER_VBP__USB3_CORE_GBL_GUCTL1" acronym="VBP2AHB_WRAP__CONTROLLER_VBP__USB3_CORE_GBL_GUCTL1" offset="0x1C" width="32" description="Global User Control Register 1">
		<bitfield id="DEV_DECOUPLE_L1L2_EVT" width="1" begin="31" end="31" resetval="0x0" description="DEV_DECOUPLE_L1L2_EVT  - 0: Default behavior, no change in device events L1/L2U3 events are not decoupled [old behavior of v2.90a and before]  - 1: Feature enabled, L1 and L2 events are separated when operating in 2.0 mode. Separate event enable bits for L1 suspend and wake events. This bit is applicable for device mode only. If this feature is enabled, L1 suspend and wake events have individual controls to enable/mask them. Enable this feature if you want to get L1 [LPM] events separtely and not combined with L2 events when operating in 2.0 speeds." range="31" rwaccess="R/W"/> 
		<bitfield id="DS_RXDET_MAX_TOUT_CTRL" width="1" begin="30" end="30" resetval="0x0" description="DS_RXDET_MAX_TOUT_CTRL  This bit is used to control the tRxDetectTimeoutDFP timer for the SuperSpeed link.  - 0: Default behavior. 12ms is used as tRxDetectTimeoutDFP.  - 1: 120ms is used as the tRxDetectTimeoutDFP. This bit is used only in host mode. For more details, refer to ECN020 for USB 3.0 Specification." range="30" rwaccess="R/W"/> 
		<bitfield id="FILTER_SE0_FSLS_EOP" width="1" begin="29" end="29" resetval="0x0" description="FILTER_SE0_FSLS_EOP  - 0: Default behavior, no change in Linestate check for SE0 detection in FS/LS  - 1: Feature enabled, FS/LS SE0 is filtered for 2 clocks for detecting EOP  This bit is applicable for FS/LS operation. If this feature is enabled, then SE0 on the linestate is validated for 2 consecutive utmi/ulpi clock edges for EOP detection. This feature is applicable only in FS in device mode and FS/LS mode of operation in host mode.   Device mode: FS -  If GUCTL1.FILTER_SE0_FSLS_EOP is set, then for device LPM handshake, the controller will ignore single SE0 glitch on the linestate during transmit. Only 2 or more SE0 is considered as a valid EOP on FS.  Host mode: FS/LS - If GUCTL1.FILTER_SE0_FSLS_EOP is set, then the controller will ignore single SE0 glitch on the linestate during transmit. Only 2 or more SE0 is considered as a valid EOP on FS/LS port.  Enable this feature if the LineState has SE0 glitches during transmission. This bit is quasi-static, that is, it must not be changed during device operation. " range="29" rwaccess="R/W"/> 
		<bitfield id="TX_IPGAP_LINECHECK_DIS" width="1" begin="28" end="28" resetval="0x0" description="TX_IPGAP_LINECHECK_DIS  - 0: Default behavior, no change in Linestate check  - 1: Feature enabled, 2.0 MAC disables Linestate check during HS transmit This bit is applicable for HS operation of u2mac. If this feature is enabled, then the 2.0 mac operating in HS ignores the UTMI/ULPI Linestate during the transmit of a token [during token-to-token and token-to-data IPGAP]. When enabled, the controller implements a fixed 40-bit TxEndDelay after the packet is given on UTMI and ignores the Linestate during this time. This feature is applicable only in HS mode of operation.   Device mode: If GUCTL1.TX_IPGAP_LINECHECK_DIS is set, then for device LPM handshake, the controller will ignore the linestate after TX and wait for fixed clocks [40 bit times equivalent] after transmitting ACK on utmi.  Host mode: If GUCTL1.TX_IPGAP_LINECHECK_DIS is set, then the ipgap between [tkn to tkn/data] is added by 40 bit times of TXENDDELAY, and linestate is ignored during this 40 bit times delay.  Enable this bit if the LineState will not reflect the expected line state [J] during transmission. This bit is quasi-static, that is, it must not be changed during device operation. " range="28" rwaccess="R/W"/> 
		<bitfield id="DEV_TRB_OUT_SPR_IND" width="1" begin="27" end="27" resetval="0x0" description="DEV_TRB_OUT_SPR_IND  - 0: Default behavior, no change in TRB status dword  - 1: Feature enabled, OUT TRB status indicates Short Packet This bit is applicable for device mode only [and ignored in host mode]. If the device application [software/hardware] wants to know if a short packet was received for an OUT in the TRB status itself, then this feature can be enabled, so that a bit is set in the TRB writeback in the buf_size dword. Bit[26] - SPR of the {trbstatus, RSVD, SPR, PCM1, bufsize} dword will be set during an OUT transfer TRB write back if this is the last TRB used for that transfer descriptor. This bit is quasi-static, that is, it must not be changed during device operation. " range="27" rwaccess="R/W"/> 
		<bitfield id="DEV_FORCE_20_CLK_FOR_30_CLK" width="1" begin="26" end="26" resetval="0x0" description="DEV_FORCE_20_CLK_FOR_30_CLK  - 0: Default behavior, Uses 3.0 clock when operating in 2.0 mode  - 1: Feature enabled This bit is applicable [and to be set] for device mode [DCFG.Speed != SS] only. In the 3.0 device controller, if the controller is  programmed to operate in 2.0 only [that is, Device Speed is programmed to 2.0 speeds in DCFG[Speed]],  then setting this bit makes the internal 2.0 [utmi/ulpi] clock to be routed as the 3.0 [pipe] clock. Enabling this feature allows the pipe3 clock to be not-running when forcibly operating in 2.0 device mode.    Note:   - When using this feature, all pipe3 inputs must be in inactive mode. In particular, the pipe3 clocks must not be running and the pipe3_phystatus_async must be tied to 0. This bit should not be set if the controller is programmed to operate in SuperSpeed mode [even when it falls back to 2.0].   - This bit is quasi-static, that is, it must not be changed during operation.   - If the parameter DWC_USB3_REMOVE_PIPE_CLK_MUX_FOR_20_MODE is enabled, then muxing 2.0 clock/signals to pipe_clk/signals have to be done outside the controller for this feature to work." range="26" rwaccess="R/W"/> 
		<bitfield id="P3_IN_U2" width="1" begin="25" end="25" resetval="0x0" description="P3_IN_U2  - 0: Default behavior, When SuperSpeed link is in U2, PowerState P2 is attempted on the PIPE Interface.  - 1: When SuperSpeed link is in U2, PowerState P3 is attempted if GUSB3PIPECTL[17] is set. Setting this bit enables P3 Power State when the SuperSpeed link is in U2. Another Power Saving option. Check with your PHY vendor before enabling this option.When setting this bit to 1 to enable P3 in P2, GUSB3PIPECTL[27] should be set to 0 to make sure that the U2 exit is attempted in P0. This bit should be set only when GCTL.SOFITPSYNC=1 or GFLADJ.GFLADJ_REFCLK_LPM_SEL=1." range="25" rwaccess="R/W"/> 
		<bitfield id="DEV_L1_EXIT_BY_HW" width="1" begin="24" end="24" resetval="0x0" description="DEV_L1_EXIT_BY_HW  - 0: Default behavior, disables device L1 hardware exit logic  - 1: feature enabled This bit is applicable for device mode [2.0] only. This field enables device controller sending remote wakeup for L1 if the device becomes ready for sending/accepting data when in L1 state. If the host expects the device to send remote wakeup signaling to resume after going into L1 in flow controlled state, then this bit can be set to send the remote wake signal automatically when the device controller becomes ready. This hardware remote wake feature is applicable only to bulk and interrupt transfers, and not for Isoch/Control  - When control transfers are in progress, the LPM will be rejected [NYET response].  Only after control transfers are completed [either with ACK/STALL], LPM will be accepted  - For Isoch transfers, the host needs to do the wake-up  and start the transfer. Device controller will not do remote-wakeup when Isoch endpoints get ready. The device SW needs to keep the GUSB2PHYCFG[EnblSlpM] reset in order to keep the PHY clock to be running for keeping track of SOF intervals.  - When L1 hibernation is enabled, the controller will not do automatic exit for hibernation requests thru L1. This bit is quasi-static, that is, it must not be changed during device operation. " range="24" rwaccess="R/W"/> 
		<bitfield id="IP_GAP_ADD_ON" width="3" begin="23" end="21" resetval="0x0" description="This register field is used to add on to the default inter packet gap setting in the USB 2.0 MAC. This should be programmed to a non zero value only in case where you need to increase the default inter packet delay calculations in the USB 2.0 MAC module DWC_usb3_u2mac.v" range="23 - 21" rwaccess="R/W"/> 
		<bitfield id="DEV_LSP_TAIL_LOCK_DIS" width="1" begin="20" end="20" resetval="0x0" description="DEV_LSP_TAIL_LOCK_DIS  - 0: Default behavior, enables device lsp lock logic for tail TRB update  - 1: Fix disabled This is a bug fix for STAR 9000716195 that affects the CSP mode for OUT endpoints in device mode. The issue is that tail TRB index is not synchronized with the cache Scratchpad bytecount update. If the fast-forward request comes in-between the bytecount update on a newly fetched TRB and the tail-index write update in TPF, the RDP works on an incorrect tail index and misses the byte count decrement for the newly fetched TRB in the fast-forwarding process. This fix needs to be present all the times. " range="20" rwaccess="R/W"/> 
		<bitfield id="NAK_PER_ENH_FS" width="1" begin="19" end="19" resetval="0x0" description="NAK_PER_ENH_FS  - 1: Enables performance enhancement for FS async endpoints in the presence of NAKs  - 0: Enhancement not applied If a periodic endpoint is present , and if a bulk endpoint which is also active is being NAKed by the device, then this could result in a decrease in performance of other Full Speed bulk endpoint which is ACked by the device. Setting this bit to 1, will enable the host controller to schedule more transactions to the async endpoints [bulk/ control] and hence will improve the performance of the bulk endpoint. This control bit should be enabled only if the existing performance with the default setting is not sufficient for your FullSpeed application. Setting this bit will only control, and is only required for Full Speed transfers." range="19" rwaccess="R/W"/> 
		<bitfield id="NAK_PER_ENH_HS" width="1" begin="18" end="18" resetval="0x0" description="NAK_PER_ENH_HS  - 1: Enables performance enhancement for HS async endpoints in the presence of NAKs  - 0: Enhancement not applied If a periodic endpoint is present, and if a bulk endpoint which is also active is being NAKed by the device, then this could result in decrease in performance of other High Speed bulk endpoint which is ACked by the device. Setting this bit to 1, will enable the host controller to schedule more transactions  to the async endpoints [ bulk/ control] and hence will improve the performance of the bulk endpoint. This control bit should be enabled only if the existing performance with the default setting is not sufficient for your HighSpeed application. Setting this bit will only control, and is only required for High Speed transfers." range="18" rwaccess="R/W"/> 
		<bitfield id="PARKMODE_DISABLE_SS" width="1" begin="17" end="17" resetval="0x0" description="PARKMODE_DISABLE_SS  This bit is used only in host mode, and is for debug purpose only.  When this bit is set to '1' all SS bus instances in park mode are disabled." range="17" rwaccess="R/W"/> 
		<bitfield id="PARKMODE_DISABLE_HS" width="1" begin="16" end="16" resetval="0x0" description="PARKMODE_DISABLE_HS  This bit is used only in host mode.  When this bit is set to '1' all HS bus instances park mode are disabled.  To improve performance in park mode, the xHCI scheduler queues in three requests of 4 packets each for High Speed asynchronous endpoints in a micro-frame. But if a device is slow and if it NAKs more than 3 times, then it is rescheduled only in the next micro-frame. This could decrease the performance of a slow device even further.  In a few high speed devices [such as Sandisk Cruzer Blade 4GB VID:1921, PID:21863 and Flex Drive VID:3744, PID:8552] when an IN request is sent within 900ns of the ACK of the previous packet, these devices send a NAK. When connected to these devices, if required, the software can disable the park mode if you see performance drop in your system. When park mode is disabled, pipelining of multiple packet is disabled and instead one packet at a time is requested by the scheduler. This allows up to 12 NAKs in a micro-frame and improves performance of these slow devices." range="16" rwaccess="R/W"/> 
		<bitfield id="PARKMODE_DISABLE_FSLS" width="1" begin="15" end="15" resetval="0x0" description="PARKMODE_DISABLE_FSLS  This bit is used only in host mode, and is for debug purpose only.  When this bit is set to '1' all FS/LS bus instances in park mode disabled." range="15" rwaccess="R/W"/> 
		<bitfield id="DISUSB2REFCLKGTNG" width="1" begin="12" end="12" resetval="0x1" description="Disable ref_clk gating for 2.0 PHY [DisUSB2RefClkGtng]  If ref_clk gating is disabled, then the ref_clk input cannot be turned off to the USB 2.0 PHY and controller. This is independent of the GCTL[DisClkGtng] setting.  - 1'b0: ref_clk gating enabled for USB 2.0 PHY  - 1'b1: ref_clk gating disabled for USB 2.0 PHY" range="12" rwaccess="R"/> 
		<bitfield id="DISREFCLKGTNG" width="1" begin="11" end="11" resetval="0x1" description="Disable ref_clk gating [DisRefClkGtng]  If the ref_clk gating is disabled then input ref_clk cannot be turned off to SSPHY and controller. This is independent of GCTL[DisClkGtng] setting.  - 1'b0: ref_clk gating Enabled for SSPHY  - 1'b1: ref_clk gating Disabled for SSPHY" range="11" rwaccess="R"/> 
		<bitfield id="RESUME_OPMODE_HS_HOST" width="1" begin="10" end="10" resetval="0x0" description="RESUME_OPMODE_HS_HOST  This bit is used only in host mode, and is for USB 2.0 opmode behavior in HS Resume.  - When this bit is set to '1', the UTMI/ULPI opmode will be changed to normal along with HS terminations after EOR. This option is to support certain legacy UTMI/ULPI PHYs.  - When this bit is set to '0', the UTMI/ULPI opmode will be changed to normal 2us after HS terminations change after EOR. This is the default behavior." range="10" rwaccess="R/W"/> 
		<bitfield id="DEV_HS_NYET_BULK_SPR" width="1" begin="9" end="9" resetval="0x0" description="DEV_HS_NYET_BULK_SPR  - 0: Default behavior, no change in device response   - 1: Feature enabled, HS bulk OUT short packet gets NYET response This bit is applicable for device mode only [and ignored in host mode] to be used in 2.0 operation.   If this bit is set, the device controller sends NYET response instead of ACK response for a successfully received bulk OUT short packet. If NYET is sent after receiving short packet, then the host would PING before sending the next OUT. this improves the performance as well as clears up the buffer/cache on the host side. Internal to the device controller, short packet [SPR=1] processing takes some time, and during this time, the USB is flow controlled. With NYET response instead of ACK on short packet, the host does not send another OUT-DATA without pinging in HS mode.  This bit is quasi-static, that is, it must not be changed during device operation." range="9" rwaccess="R/W"/> 
		<bitfield id="L1_SUSP_THRLD_EN_FOR_HOST" width="1" begin="8" end="8" resetval="0x1" description="L1_SUSP_THRLD_EN_FOR_HOST  This bit is used only in host mode.  The host controller asserts the utmi_l1_suspend_n and utmi_sleep_n output signals [see LPM Interface Signals table in the Databook] as follows:  The controller asserts the utmi_l1_suspend_n signal to put the PHY into deep low-power mode in L1 when both of the following are true:  - The HIRD/BESL value used is greater than or equal to the value in L1_SUSP_THRLD_FOR_HOST field.  - The L1_SUSP_THRLD_EN_FOR_HOST bit is set to 1'b1. The controller asserts utmi_sleep_n on L1 when one of the following is true:  - The HIRD/BESL value used is less than the value in L1_SUSP_THRLD_FOR_HOST field.  - The L1_SUSP_THRLD_EN_FOR_HOST bit is set to 1'b0." range="8" rwaccess="R/W"/> 
		<bitfield id="L1_SUSP_THRLD_FOR_HOST" width="4" begin="7" end="4" resetval="0x8" description="L1_SUSP_THRLD_FOR_HOST  This field is effective only when the L1_SUSP_THRLD_EN_FOR_HOST bit is set to 1. For more details, refer to the description of the L1_SUSP_THRLD_EN_FOR_HOST bit." range="7 - 4" rwaccess="R/W"/> 
		<bitfield id="HC_ERRATA_ENABLE" width="1" begin="3" end="3" resetval="0x1" description="Host ELD Enable [HELDEn]  When this bit is set to 1, it enables the Exit Latency Delta [ELD] support defined in the xHCI 1.0 Errata.  This bit is used only in the host mode. This bit has to be set to 1 in Host mode." range="3" rwaccess="R/W"/> 
		<bitfield id="HC_PARCHK_DISABLE" width="1" begin="2" end="2" resetval="0x0" description="Host Parameter Check Disable [HParChkDisable]  When this bit is set to '0' [by default], the xHC checks that the input slot/EP context fields comply to the xHCI Specification. Upon detection of a parameter error during command execution, the xHC generates an event TRB with completion code indicating 'PARAMETER ERROR'.  When the bit is set to '1', the xHC does not perform parameter checks and does not generate 'PARAMETER ERROR' completion code." range="2" rwaccess="R/W"/> 
		<bitfield id="OVRLD_L1_SUSP_COM" width="1" begin="1" end="1" resetval="0x1" description="OVRLD_L1_SUSP_COM  If this bit is set, the utmi_l1_suspend_com_n is overloaded with the utmi_sleep_n signal. This bit is usually set if the PHY stops the port clock during L1 sleep condition.  Note: The recommended connection for the SUSPENDM/SLEEPM signals to the PHY with respect to this bit is as follows.  For non-zero ports:  Connect:  - utmi_sleep_n[n] to SLEEPM[n]  - [utmi_suspend_n[n] &#38; utmi_l1_suspend_n[n]] to SUSPENDM[n]  - USB2 PHYCLK[n] to utmi_clk[n] GUCTL1.OVRLD_L1_SUSP_COM impacts only Port0.  For Port0:  For Synopsys PHY,  GUSB2PHYCFGn.U2_FREECLK_EXISTS=1. With this connection, the PHY keeps PLL active so that FREECLK is always available irrespective of suspend/sleep.   - Connect USB2 PHY COMMONONN to 0.  - Connect utmi_sleep_n[0] to SLEEPM[0].  - Connect [utmi_suspend_n[0] &#38; utmi_l1_suspend_n[0]] to SUSPENDM[0].  - Connect USB2 PHY FREECLK to utmi_clk[0].  - Leave utmi_suspend_com_n, utmi_l1_suspend_com_n unconnected.  - GUCTL1.OVRLD_L1_SUSP_COM can be set to any value. For Third Party PHY,  GUSB2PHYCFGn.U2_FREECLK_EXISTS=0. With this connection the PHY can shut off all the clocks when the required conditions are met [like, GUSB2PHYCFGn[8,6], GUCTL1[1], GFLADJ[23], GCTL[10], Suspend condition, HW LPM enable etc].  - Connect -utmi_suspend_com_n to SUSPENDM[0] [or equivalent].  - Connect -utmi_l1_suspend_com_n to SLEEPM[0] [or equivalent].  - Connect PHYCLK0 [first port clock] to utmi_clk[0].   - Leave utmi_suspend_n[0], utmi_l1_suspend_ n[0], utmi_sleep_n[0] unconnected.  - Set GUCTL1.OVRLD_L1_SUSP_COM to 1'b1." range="1" rwaccess="R/W"/> 
		<bitfield id="LOA_FILTER_EN" width="1" begin="0" end="0" resetval="0x1" description="LOA_FILTER_EN  If this bit is set, the USB 2.0 port babble is checked at least three consecutive times before the port is disabled. This prevents false triggering of the babble condition when using low quality cables.  Note: This bit is valid only in host mode." range="0" rwaccess="R/W"/>
	</register>
	<register id="VBP2AHB_WRAP__CONTROLLER_VBP__USB3_CORE_GBL_GSNPSID" acronym="VBP2AHB_WRAP__CONTROLLER_VBP__USB3_CORE_GBL_GSNPSID" offset="0x20" width="32" description="Global Synopsys ID Register

This is a read-only register that contains the release number of the controller.">
		<bitfield id="SYNOPSYSID" width="32" begin="31" end="0" resetval="0x1429418763" description="Synopsys ID  - SynopsysID[31:16] indicates Core Identification Number. 0x5533 is ASCII for U3 [DWC_usb3].  - SynopsysID[15:0] indicates the release number. Current Release is 3.30a. Software uses this register to configure release-specific features in the driver." range="31 - 0" rwaccess="R"/>
	</register>
	<register id="VBP2AHB_WRAP__CONTROLLER_VBP__USB3_CORE_GBL_GGPIO" acronym="VBP2AHB_WRAP__CONTROLLER_VBP__USB3_CORE_GBL_GGPIO" offset="0x24" width="32" description="Global General Purpose Input/Output Register

The application can use this register for general purpose input and output ports or for debugging.">
		<bitfield id="GPO" width="16" begin="31" end="16" resetval="0x0" description="General Purpose Output  The value of this field is driven out on the gp_out[15:0] output port." range="31 - 16" rwaccess="R/W"/> 
		<bitfield id="GPI" width="16" begin="15" end="0" resetval="0x0" description="General Purpose Input  The read value of this field reflects the gp_in[15:0] input signal value.   Note: Register bit-bash test should not check for reset value of this field since its not predictable. depends on the gp_in port." range="15 - 0" rwaccess="R"/>
	</register>
	<register id="VBP2AHB_WRAP__CONTROLLER_VBP__USB3_CORE_GBL_GUID" acronym="VBP2AHB_WRAP__CONTROLLER_VBP__USB3_CORE_GBL_GUID" offset="0x28" width="32" description="Global User ID Register

This is a read/write register containing the User ID. The power-on value for this register is specified as the User Identification Register. Power-on value during coreConsultant configuration (parameter DWC_USB3_USERID). This register can be used in the following ways:
 - To store the version or revision of your system.
 - To store hardware configurations that are outside the controller.
 - As a scratch register.">
		<bitfield id="USERID" width="32" begin="31" end="0" resetval="0x0" description="USERID  Application-programmable ID field." range="31 - 0" rwaccess="R/W"/>
	</register>
	<register id="VBP2AHB_WRAP__CONTROLLER_VBP__USB3_CORE_GBL_GUCTL" acronym="VBP2AHB_WRAP__CONTROLLER_VBP__USB3_CORE_GBL_GUCTL" offset="0x2C" width="32" description="Global User Control Register:  

This register provides a few options for the software to control the controller behavior in the Host mode. Most of the options are used to improve host inter-operability with different devices.">
		<bitfield id="REFCLKPER" width="10" begin="31" end="22" resetval="0x50" description="REFCLKPER  This field indicates in terms of nano seconds the period of ref_clk. The default value of this register is set to 'h8 [8ns/125 MHz].   This field needs to be updated during power-on initialization, if GCTL.SOFITPSYNC or GFLADJ.GFLADJ_REFCLK_LPM_SEL is set to '1'. The programmable maximum value is 62ns, and the minimum value is 8ns.   You must use a reference clock with a period that is an integer multiple, so that ITP can meet the jitter margin of 32ns. The allowable ref_clk frequencies whose period is not integer multiples are 16/17/19.2/24/39.7MHz.   This field must not be set to '0' at any time. If you never plan to use this feature, then set this field to 'h8, the default value." range="31 - 22" rwaccess="R/W"/> 
		<bitfield id="NOEXTRDL" width="1" begin="21" end="21" resetval="0x0" description="No Extra Delay Between SOF and the First Packet[NoExtrDl]  Some HS devices misbehave when the host sends a packet immediately after a SOF. However, adding an extra delay between a SOF and the first packet can reduce the USB data rate and performance.   This bit is used to control whether the host must wait for 2 microseconds before it sends the first packet after a SOF, or not. User can set this bit to one to improve the performance if those problematic devices are not a concern in the user's host environment.  - 1'b0: Host waits for 2 microseconds after a SOF before it sends the first USB packet.  - 1'b1: Host doesn't wait after a SOF before it sends the first USB packet." range="21" rwaccess="R/W"/> 
		<bitfield id="SPRSCTRLTRANSEN" width="1" begin="17" end="17" resetval="0x0" description="Sparse Control Transaction Enable  Some devices are slow in responding to Control transfers. Scheduling multiple transactions in one microframe/frame can cause these devices to misbehave.  If this bit is set to 1'b1, the host controller schedules transactions for a Control transfer in different microframes/frames." range="17" rwaccess="R/W"/> 
		<bitfield id="RESBWHSEPS" width="1" begin="16" end="16" resetval="0x0" description="Reserving 85% Bandwidth for HS Periodic EPs [ResBwHSEPS]  By default, HC reserves 800f the bandwidth for periodic EPs. If this bit is set, the bandwidth is relaxed to 85% to accommodate two high speed, high bandwidth ISOC EPs.  USB 2.0 required 800andwidth allocated for ISOC traffic. If two High-bandwidth ISOC devices [HD Webcams] are connected, and if each requires 1024-bytes X 3 packets per Micro-Frame, then the bandwidth required is around 82%. If this bit is set, then it is possible to connect two Webcams of 1024bytes X 3 paylod per Micro-Frame each. Otherwise, you may have to reduce the resolution of the Webcams.  This bit is valid in Host and DRD configuration and is used in host mode operation only. Ignore this bit in device mode." range="16" rwaccess="R/W"/> 
		<bitfield id="USBHSTINAUTORETRYEN" width="1" begin="14" end="14" resetval="0x0" description="Host IN Auto Retry [USBHstInAutoRetryEn]  When set, this field enables the Auto Retry feature. For IN transfers [non-isochronous] that encounter data packets with CRC errors or internal overrun scenarios, the auto retry feature causes the Host controller to reply to the device with a non-terminating retry ACK [that is, an ACK transaction packet with Retry = 1 and NumP != 0].   If the Auto Retry feature is disabled [default], the controller will respond with a terminating retry ACK [that is, an ACK transaction packet with Retry = 1 and NumP = 0].  - 1'b0: Auto Retry Disabled   - 1'b1: Auto Retry Enabled Note: When enabling Auto Retry feature, if the system latency is large enough to cause the internal PSQ full [PSQ can be full as the result of messages not being processed because of pending fetches before flushing the TxQ due to NRDY/ERDY conditions], then the host controller can generate a transaction error." range="14" rwaccess="R/W"/> 
		<bitfield id="ENOVERLAPCHK" width="1" begin="13" end="13" resetval="0x0" description="Enable Check for LFPS Overlap During Remote Ux Exit:  If this bit is set to,  - 1'b1: The SuperSpeed link when exiting U1/U2/U3 waits for either the remote link LFPS or TS1/TS2 training symbols before it confirms that the LFPS handshake is complete. This is done to handle the case where the LFPS glitch causes the link to start exiting from the low power state. Looking for the LFPS overlap makes sure that the link partner also sees the LFPS.  - 1'b0: When the link exists U1/U2/U3 because of a remote exit, it does not look for an LFPS overlap." range="13" rwaccess="R/W"/> 
		<bitfield id="EXTCAPSUPPTEN" width="1" begin="12" end="12" resetval="0x0" description="External Extended Capability Support Enable [ExtCapSuptEN]  When set, this field enables extended capabilities to be implemented outside the controller.   When the ExtCapSupEN is set and the Debug Capability is enabled, the Next Capability pointer in Debug Capability returns 16.  A read to the first DWORD of the last internal extended capability [the xHCI Supported Protocol Capability for USB 3.0 when the Debug Capability is not enabled] returns a value of 4 in the Next Capability Pointer field.   This indicates to software that there is another capability four DWORDs after this capability [for example, at address N+16 where N is the address of this DWORD].  If enabled, an external address decoder that snoops the xHC target interface must be implemented.   If it sees an access to N+16 or greater, the target access is re-routed to a piece of hardware which returns the external capability pointer register of the new capability and also handles reads/writes to this new capability and the side effects.   If disabled, a read to the first DWORD of the last internal extended capability returns 0 in the 'Next Capability Pointer field. This indicates there are no more capabilities." range="12" rwaccess="R/W"/> 
		<bitfield id="INSRTEXTRFSBODI" width="1" begin="11" end="11" resetval="0x0" description="Insert Extra Delay Between FS Bulk OUT Transactions [InsrtExtrFSBODl].  Some FS devices are slow to receive Bulk OUT data and can get stuck when there are consecutive Bulk OUT transactions with short inter-transaction delays. This bit is used to control whether the host inserts extra delay between consecutive Bulk OUT transactions to a FS Endpoint.  - 1'b0: Host doesn't insert extra delay between consecutive Bulk OUT transactions to a FS Endpoint.  - 1'b1: Host inserts about 12us extra delay between consecutive Bulk OUT transactions to a FS Endpoint to work around the device issue. Note: Setting this bit to one will reduce the Bulk OUT transfer performance for most of the FS devices." range="11" rwaccess="R/W"/> 
		<bitfield id="DTCT" width="2" begin="10" end="9" resetval="0x0" description="Device Timeout Coarse Tuning [DTCT]  This field is a Host mode parameter which determines how long the host waits for a response from device before considering a timeout.   The controller first checks the DTCT value. If it is 0, then the timeout value is defined by the DTFT. If it is non-zero, then it uses the following timeout values:  - 2'b00: 0 usec -> use DTFT value instead  - 2'b01: 500 usec  - 2'b10: 1.5 msec  - 2'b11: 6.5 msec Note: When the system latency is larger than the programmed DTCT/DTFT value, if the host controller is not able to accept certain transactions on the bus [because of system bus delays], the controller may not release header credits which in turn can cause the host to report a transaction error. Therefore, program this value to be larger than your system delay." range="10 - 9" rwaccess="R/W"/> 
		<bitfield id="DTFT" width="9" begin="8" end="0" resetval="0x16" description="Device Timeout Fine Tuning [DTFT]  This field is a Host mode parameter which determines how long the host waits for a response from device before considering a timeout.  For the DTFT field to take effect, DTCT must be set to 2'b00.  The DTFT value is the number of 125 MHz clocks * 256 to count before considering a device timeout.   The minimum value of DTFT is 2.  For example, if the mac3_clk is 125 MHz clk [8 ns period], this is calculated as follows:  [DTFT value] * 256 * [8 ns]   Quick Reference:  - if DTFT = 0x2, 2*256*8 = 4usec timeout  - if DTFT = 0x5, 5*256*8 = 10usec timeout  - if DTFT = 0xA, 10*256*8 = 20usec timeout  - if DTFT = 0x10, 16*256*8 = 32usec timeout  - if DTFT = 0x19, 25*256*8 = 51usec timeout  - if DTFT = 0x31, 49*256*8 = 100usec timeout  - if DTFT = 0x62, 98*256*8 = 200usec timeout Note:  When the system latency is larger than the programmed DTCT/DTFT value, if the host controller is not able to accept certain transactions on the bus [because of system bus delays], the controller may not release header credits which in turn can cause the host to report a transaction error. Therefore, program this value to be larger than your system delay." range="8 - 0" rwaccess="R/W"/>
	</register>
	<register id="VBP2AHB_WRAP__CONTROLLER_VBP__USB3_CORE_GBL_GBUSERRADDRLO" acronym="VBP2AHB_WRAP__CONTROLLER_VBP__USB3_CORE_GBL_GBUSERRADDRLO" offset="0x30" width="32" description="Gobal SoC Bus Error Address Register - Low

This is an alternate register for the GBUSERRADDR register.">
		<bitfield id="BUSERRADDR" width="32" begin="31" end="0" resetval="0x0" description="Bus Address - Low [BusAddrLo] This register contains the lower 32 bits of the first bus address that encountered a SoC bus error. It is valid when the GSTS.BusErrAddrVld field is 1. It can only be cleared by resetting the controller.  Note: Only supported in AHB and AXI configurations." range="31 - 0" rwaccess="R"/>
	</register>
	<register id="VBP2AHB_WRAP__CONTROLLER_VBP__USB3_CORE_GBL_GBUSERRADDRHI" acronym="VBP2AHB_WRAP__CONTROLLER_VBP__USB3_CORE_GBL_GBUSERRADDRHI" offset="0x34" width="32" description="Gobal SoC Bus Error Address Register - High

This is an alternate register for the GBUSERRADDR register.">
		<bitfield id="BUSERRADDR" width="32" begin="31" end="0" resetval="0x0" description="Bus Address - High [BusAddrHi] This register contains the higher 32 bits of the first bus address that encountered a SoC bus error. It is valid when the GSTS.BusErrAddrVld field is 1. It can only be cleared by resetting the controller.  Note: Only supported in AHB and AXI configurations." range="31 - 0" rwaccess="R"/>
	</register>
	<register id="VBP2AHB_WRAP__CONTROLLER_VBP__USB3_CORE_GBL_GPRTBIMAPLO" acronym="VBP2AHB_WRAP__CONTROLLER_VBP__USB3_CORE_GBL_GPRTBIMAPLO" offset="0x38" width="32" description="Global SS Port to Bus Instance Mapping Register - Low

This is an alternate register for the GPRTBIMAP register.

Register fields are read-write with respect to number of port instantiated. writeAsRead constraint is added to limit side effects for unused fields. 

For a configuration with number of USB 3.0 ports same as number of SS Bus Instances, do not remap during debug session. If you remap for some reason, then the debug host must be connected to a port which has a dedicated SS Bus Instance.

For example, if DWC_USB3_NUM_U3_ROOT_PORTS =3 and DWC_USB3_NUM_SS_USB_INSTANCES=3, and software maps the first SS port to the first SS BI and the second/third port to the second BI, then the debug host can be connected to the first port only.

Note: For reset values, refer to the corresponding values in the GPRTBIMAP register.">
		<bitfield id="BINUM8" width="4" begin="31" end="28" resetval="0x0" description="BINUM8: SS USB Instance Number for Port 8.  Application-programmable ID field." range="31 - 28" rwaccess="R"/> 
		<bitfield id="BINUM7" width="4" begin="27" end="24" resetval="0x0" description="BINUM7: SS USB Instance Number for Port 7.  Application-programmable ID field." range="27 - 24" rwaccess="R"/> 
		<bitfield id="BINUM6" width="4" begin="23" end="20" resetval="0x0" description="BINUM6: SS USB Instance Number for Port 6.  Application-programmable ID field." range="23 - 20" rwaccess="R"/> 
		<bitfield id="BINUM5" width="4" begin="19" end="16" resetval="0x0" description="BINUM5: SS USB Instance Number for Port 5.   Application-programmable ID field." range="19 - 16" rwaccess="R"/> 
		<bitfield id="BINUM4" width="4" begin="15" end="12" resetval="0x0" description="BINUM4: SS USB Instance Number for Port 4.  Application-programmable ID field." range="15 - 12" rwaccess="R"/> 
		<bitfield id="BINUM3" width="4" begin="11" end="8" resetval="0x0" description="BINUM3: SS USB Instance Number for Port 3.  Application-programmable ID field." range="11 - 8" rwaccess="R"/> 
		<bitfield id="BINUM2" width="4" begin="7" end="4" resetval="0x0" description="BINUM2: SS USB Instance Number for Port 2.  Application-programmable ID field." range="7 - 4" rwaccess="R"/> 
		<bitfield id="BINUM1" width="4" begin="3" end="0" resetval="0x0" description="BINUM1: SS USB Instance Number for Port 1.  Application-programmable ID field." range="3 - 0" rwaccess="R/W"/>
	</register>
	<register id="VBP2AHB_WRAP__CONTROLLER_VBP__USB3_CORE_GBL_GPRTBIMAPHI" acronym="VBP2AHB_WRAP__CONTROLLER_VBP__USB3_CORE_GBL_GPRTBIMAPHI" offset="0x3C" width="32" description="Global SS Port to Bus Instance Mapping Register - High

This is an alternate register for the GPRTBIMAP register.

For a configuration with number of USB 3.0 ports same as number of SS Bus Instances, do not remap during debug session. If you remap for some reason, then the debug host must be connected to a port which has a dedicated SS Bus Instance.

For example, if DWC_USB3_NUM_U3_ROOT_PORTS =3 and DWC_USB3_NUM_SS_USB_INSTANCES=3, and software maps the first SS port to the first SS BI and the second/third port to the second BI, then the debug host can be connected to the first port only.

Note: For reset values, refer to the corresponding values in the GPRTBIMAP register.">
		<bitfield id="BINUM15" width="4" begin="27" end="24" resetval="0x0" description="BINUM15: SS USB Instance Number for Port 15.  Application-programmable ID field." range="27 - 24" rwaccess="R"/> 
		<bitfield id="BINUM14" width="4" begin="23" end="20" resetval="0x0" description="BINUM14: SS USB Instance Number for Port 14.  Application-programmable ID field." range="23 - 20" rwaccess="R"/> 
		<bitfield id="BINUM13" width="4" begin="19" end="16" resetval="0x0" description="BINUM13: SS USB Instance Number for Port 13.  Application-programmable ID field." range="19 - 16" rwaccess="R"/> 
		<bitfield id="BINUM12" width="4" begin="15" end="12" resetval="0x0" description="BINUM12: SS USB Instance Number for Port 12.  Application-programmable ID field." range="15 - 12" rwaccess="R"/> 
		<bitfield id="BINUM11" width="4" begin="11" end="8" resetval="0x0" description="BINUM11: SS USB Instance Number for Port 11.  Application-programmable ID field." range="11 - 8" rwaccess="R"/> 
		<bitfield id="BINUM10" width="4" begin="7" end="4" resetval="0x0" description="BINUM10: SS USB Instance Number for Port 10.  Application-programmable ID field." range="7 - 4" rwaccess="R"/> 
		<bitfield id="BINUM9" width="4" begin="3" end="0" resetval="0x0" description="BINUM9: SS USB Instance Number for Port 9.  Application-programmable ID field." range="3 - 0" rwaccess="R"/>
	</register>
	<register id="VBP2AHB_WRAP__CONTROLLER_VBP__USB3_CORE_GBL_GHWPARAMS0" acronym="VBP2AHB_WRAP__CONTROLLER_VBP__USB3_CORE_GBL_GHWPARAMS0" offset="0x40" width="32" description="Global Hardware Parameters Register 0

This register contains the hardware configuration options that you can select in the coreConsultant GUI.  

For a description of each parameter, refer to the Parameter Descriptions chapter in the Databook. This information is also available in coreConsultant by right-clicking the parameter label and selecting What's This or by clicking the Help tab.  

Note: 

Some of the global hardware parameters are not currently modifiable in coreConsultant. These settings are in the  &#38;#60;workspace>/src/DWC_usb3_params.v file. you must not change them.">
		<bitfield id="GHWPARAMS0_31_24" width="8" begin="31" end="24" resetval="0x64" description="DWC_USB3_AWIDTH" range="31 - 24" rwaccess="R"/> 
		<bitfield id="GHWPARAMS0_23_16" width="8" begin="23" end="16" resetval="0x32" description="DWC_USB3_SDWIDTH" range="23 - 16" rwaccess="R"/> 
		<bitfield id="GHWPARAMS0_15_8" width="8" begin="15" end="8" resetval="0x64" description="DWC_USB3_MDWIDTH" range="15 - 8" rwaccess="R"/> 
		<bitfield id="GHWPARAMS0_7_6" width="2" begin="7" end="6" resetval="0x0" description="DWC_USB3_SBUS_TYPE" range="7 - 6" rwaccess="R"/> 
		<bitfield id="GHWPARAMS0_5_3" width="3" begin="5" end="3" resetval="0x1" description="DWC_USB3_MBUS_TYPE" range="5 - 3" rwaccess="R"/> 
		<bitfield id="GHWPARAMS0_2_0" width="3" begin="2" end="0" resetval="0x2" description="DWC_USB3_MODE" range="2 - 0" rwaccess="R"/>
	</register>
	<register id="VBP2AHB_WRAP__CONTROLLER_VBP__USB3_CORE_GBL_GHWPARAMS1" acronym="VBP2AHB_WRAP__CONTROLLER_VBP__USB3_CORE_GBL_GHWPARAMS1" offset="0x44" width="32" description="Global Hardware Parameters Register 1

This register contains the hardware configuration options that you can select in the coreConsultant GUI.  

For a description of each parameter, refer to the Parameter Descriptions chapter in the Databook. This information is also available in coreConsultant by right-clicking the parameter label and selecting What's This or by clicking the Help tab.  

Note: 

Some of the global hardware parameters are not currently modifiable in coreConsultant. These settings are in the  &#38;#60;workspace>/src/DWC_usb3_params.v file. you must not change them.">
		<bitfield id="GHWPARAMS1_31" width="1" begin="31" end="31" resetval="0x0" description="DWC_USB3_EN_DBC" range="31" rwaccess="R"/> 
		<bitfield id="GHWPARAMS1_30" width="1" begin="30" end="30" resetval="0x0" description="DWC_USB3_RM_OPT_FEATURES" range="30" rwaccess="R"/> 
		<bitfield id="GHWPARAMS1_29" width="1" begin="29" end="29" resetval="0x0" description="Reserved1" range="29" rwaccess="R"/> 
		<bitfield id="GHWPARAMS1_28" width="1" begin="28" end="28" resetval="0x0" description="DWC_USB3_RAM_BUS_CLKS_SYNC" range="28" rwaccess="R"/> 
		<bitfield id="GHWPARAMS1_27" width="1" begin="27" end="27" resetval="0x0" description="DWC_USB3_MAC_RAM_CLKS_SYNC" range="27" rwaccess="R"/> 
		<bitfield id="GHWPARAMS1_26" width="1" begin="26" end="26" resetval="0x0" description="DWC_USB3_MAC_PHY_CLKS_SYNC" range="26" rwaccess="R"/> 
		<bitfield id="GHWPARAMS1_25_24" width="2" begin="25" end="24" resetval="0x1" description="DWC_USB3_EN_PWROPT" range="25 - 24" rwaccess="R"/> 
		<bitfield id="GHWPARAMS1_23" width="1" begin="23" end="23" resetval="0x1" description="DWC_USB3_SPRAM_TYP" range="23" rwaccess="R"/> 
		<bitfield id="GHWPARAMS1_22_21" width="2" begin="22" end="21" resetval="0x1" description="DWC_USB3_NUM_RAMS" range="22 - 21" rwaccess="R"/> 
		<bitfield id="GHWPARAMS1_20_15" width="6" begin="20" end="15" resetval="0x8" description="DWC_USB3_DEVICE_NUM_INT  For details on DWC_USB3_DEVICE_NUM_INT, refer to &#38;#60;workspace>/src/DWC_usb3_params.v file." range="20 - 15" rwaccess="R"/> 
		<bitfield id="GHWPARAMS1_14_12" width="3" begin="14" end="12" resetval="0x4" description="DWC_USB3_ASPACEWIDTH" range="14 - 12" rwaccess="R"/> 
		<bitfield id="GHWPARAMS1_11_9" width="3" begin="11" end="9" resetval="0x4" description="DWC_USB3_REQINFOWIDTH" range="11 - 9" rwaccess="R"/> 
		<bitfield id="GHWPARAMS1_8_6" width="3" begin="8" end="6" resetval="0x4" description="DWC_USB3_DATAINFOWIDTH" range="8 - 6" rwaccess="R"/> 
		<bitfield id="GHWPARAMS1_5_3" width="3" begin="5" end="3" resetval="0x7" description="DWC_USB3_BURSTWIDTH-1" range="5 - 3" rwaccess="R"/> 
		<bitfield id="GHWPARAMS1_2_0" width="3" begin="2" end="0" resetval="0x3" description="DWC_USB3_IDWIDTH-1" range="2 - 0" rwaccess="R"/>
	</register>
	<register id="VBP2AHB_WRAP__CONTROLLER_VBP__USB3_CORE_GBL_GHWPARAMS2" acronym="VBP2AHB_WRAP__CONTROLLER_VBP__USB3_CORE_GBL_GHWPARAMS2" offset="0x48" width="32" description="Global Hardware Parameters Register 2

This register contains the hardware configuration options that you can select in the coreConsultant GUI.  

For a description of each parameter, refer to the Parameter Descriptions chapter in the Databook. This information is also available in coreConsultant by right-clicking the parameter label and selecting What's This or by clicking the Help tab.  

Note: 

Some of the global hardware parameters are not currently modifiable in coreConsultant. These settings are in the  &#38;#60;workspace>/src/DWC_usb3_params.v file. you must not change them.">
		<bitfield id="GHWPARAMS2_31_0" width="32" begin="31" end="0" resetval="0x0" description="DWC_USB3_USERID" range="31 - 0" rwaccess="R"/>
	</register>
	<register id="VBP2AHB_WRAP__CONTROLLER_VBP__USB3_CORE_GBL_GHWPARAMS3" acronym="VBP2AHB_WRAP__CONTROLLER_VBP__USB3_CORE_GBL_GHWPARAMS3" offset="0x4C" width="32" description="Global Hardware Parameters Register 3

This register contains the hardware configuration options that you can select in the coreConsultant GUI.  

For a description of each parameter, refer to the Parameter Descriptions chapter in the Databook. This information is also available in coreConsultant by right-clicking the parameter label and selecting What's This or by clicking the Help tab.  

Note: 

Some of the global hardware parameters are not currently modifiable in coreConsultant. These settings are in the  &#38;#60;workspace>/src/DWC_usb3_params.v file. you must not change them.">
		<bitfield id="GHWPARAMS3_30_23" width="8" begin="30" end="23" resetval="0x32" description="DWC_USB3_CACHE_TOTAL_XFER_RESOURCES" range="30 - 23" rwaccess="R"/> 
		<bitfield id="GHWPARAMS3_22_18" width="5" begin="22" end="18" resetval="0x16" description="DWC_USB3_NUM_IN_EPS" range="22 - 18" rwaccess="R"/> 
		<bitfield id="GHWPARAMS3_17_12" width="6" begin="17" end="12" resetval="0x32" description="DWC_USB3_NUM_EPS" range="17 - 12" rwaccess="R"/> 
		<bitfield id="GHWPARAMS3_11" width="1" begin="11" end="11" resetval="0x0" description="DWC_USB3_ULPI_CARKIT" range="11" rwaccess="R"/> 
		<bitfield id="GHWPARAMS3_10" width="1" begin="10" end="10" resetval="0x0" description="DWC_USB3_VENDOR_CTL_INTERFACE" range="10" rwaccess="R"/> 
		<bitfield id="GHWPARAMS3_7_6" width="2" begin="7" end="6" resetval="0x2" description="DWC_USB3_HSPHY_DWIDTH" range="7 - 6" rwaccess="R"/> 
		<bitfield id="GHWPARAMS3_5_4" width="2" begin="5" end="4" resetval="0x0" description="DWC_USB3_FSPHY_INTERFACE" range="5 - 4" rwaccess="R"/> 
		<bitfield id="GHWPARAMS3_3_2" width="2" begin="3" end="2" resetval="0x1" description="DWC_USB3_HSPHY_INTERFACE" range="3 - 2" rwaccess="R"/> 
		<bitfield id="GHWPARAMS3_1_0" width="2" begin="1" end="0" resetval="0x0" description="DWC_USB3_SSPHY_INTERFACE" range="1 - 0" rwaccess="R"/>
	</register>
	<register id="VBP2AHB_WRAP__CONTROLLER_VBP__USB3_CORE_GBL_GHWPARAMS4" acronym="VBP2AHB_WRAP__CONTROLLER_VBP__USB3_CORE_GBL_GHWPARAMS4" offset="0x50" width="32" description="Global Hardware Parameters Register 4

This register contains the hardware configuration options that you can select in the coreConsultant GUI.  

For a description of each parameter, refer to the Parameter Descriptions chapter in the Databook. This information is also available in coreConsultant by right-clicking the parameter label and selecting What's This or by clicking the Help tab.  

Note: 

Some of the global hardware parameters are not currently modifiable in coreConsultant. These settings are in the  &#38;#60;workspace>/src/DWC_usb3_params.v file. you must not change them.">
		<bitfield id="GHWPARAMS4_31_28" width="4" begin="31" end="28" resetval="0x4" description="DWC_USB3_BMU_LSP_DEPTH" range="31 - 28" rwaccess="R"/> 
		<bitfield id="GHWPARAMS4_27_24" width="4" begin="27" end="24" resetval="0x7" description="DWC_USB3_BMU_PTL_DEPTH-1" range="27 - 24" rwaccess="R"/> 
		<bitfield id="GHWPARAMS4_23" width="1" begin="23" end="23" resetval="0x1" description="DWC_USB3_EN_ISOC_SUPT" range="23" rwaccess="R"/> 
		<bitfield id="GHWPARAMS4_21" width="1" begin="21" end="21" resetval="0x1" description="DWC_USB3_EXT_BUFF_CONTROL" range="21" rwaccess="R"/> 
		<bitfield id="GHWPARAMS4_20_17" width="4" begin="20" end="17" resetval="0x1" description="DWC_USB3_NUM_SS_USB_INSTANCES" range="20 - 17" rwaccess="R"/> 
		<bitfield id="GHWPARAMS4_16_13" width="4" begin="16" end="13" resetval="0x1" description="DWC_USB3_HIBER_SCRATCHBUFS  Number of external scratchpad buffers the controller requires to save its internal state in the device mode. Each buffer is assumed to be 4KB. The scratchpad buffer array must have this many buffer pointers." range="16 - 13" rwaccess="R"/> 
		<bitfield id="GHWPARAMS4_5_0" width="6" begin="5" end="0" resetval="0x4" description="DWC_USB3_CACHE_TRBS_PER_TRANSFER" range="5 - 0" rwaccess="R"/>
	</register>
	<register id="VBP2AHB_WRAP__CONTROLLER_VBP__USB3_CORE_GBL_GHWPARAMS5" acronym="VBP2AHB_WRAP__CONTROLLER_VBP__USB3_CORE_GBL_GHWPARAMS5" offset="0x54" width="32" description="Global Hardware Parameters Register 5

This register contains the hardware configuration options that you can select in the coreConsultant GUI.  

For a description of each parameter, refer to the Parameter Descriptions chapter in the Databook. This information is also available in coreConsultant by right-clicking the parameter label and selecting What's This or by clicking the Help tab.  

Note: 

Some of the global hardware parameters are not currently modifiable in coreConsultant. These settings are in the  &#38;#60;workspace>/src/DWC_usb3_params.v file. you must not change them.">
		<bitfield id="GHWPARAMS5_27_22" width="6" begin="27" end="22" resetval="0x16" description="DWC_USB3_DFQ_FIFO_DEPTH" range="27 - 22" rwaccess="R"/> 
		<bitfield id="GHWPARAMS5_21_16" width="6" begin="21" end="16" resetval="0x32" description="DWC_USB3_DWQ_FIFO_DEPTH" range="21 - 16" rwaccess="R"/> 
		<bitfield id="GHWPARAMS5_15_10" width="6" begin="15" end="10" resetval="0x8" description="DWC_USB3_TXQ_FIFO_DEPTH" range="15 - 10" rwaccess="R"/> 
		<bitfield id="GHWPARAMS5_9_4" width="6" begin="9" end="4" resetval="0x8" description="DWC_USB3_RXQ_FIFO_DEPTH" range="9 - 4" rwaccess="R"/> 
		<bitfield id="GHWPARAMS5_3_0" width="4" begin="3" end="0" resetval="0x8" description="DWC_USB3_BMU_BUSGM_DEPTH" range="3 - 0" rwaccess="R"/>
	</register>
	<register id="VBP2AHB_WRAP__CONTROLLER_VBP__USB3_CORE_GBL_GHWPARAMS6" acronym="VBP2AHB_WRAP__CONTROLLER_VBP__USB3_CORE_GBL_GHWPARAMS6" offset="0x58" width="32" description="Global Hardware Parameters Register 6

This register contains the hardware configuration options that you can select in the coreConsultant GUI.  

For a description of each parameter, refer to the Parameter Descriptions chapter in the Databook. This information is also available in coreConsultant by right-clicking the parameter label and selecting What's This or by clicking the Help tab.  

Note: 

Some of the global hardware parameters are not currently modifiable in coreConsultant. These settings are in the  &#38;#60;workspace>/src/DWC_usb3_params.v file. you must not change them.">
		<bitfield id="GHWPARAMS6_31_16" width="16" begin="31" end="16" resetval="0x7206" description="DWC_USB3_RAM0_DEPTH" range="31 - 16" rwaccess="R"/> 
		<bitfield id="BUSFLTRSSUPPORT" width="1" begin="15" end="15" resetval="0x1" description="DWC_USB3_EN_BUS_FILTERS" range="15" rwaccess="R"/> 
		<bitfield id="BCSUPPORT" width="1" begin="14" end="14" resetval="0x0" description="DWC_USB3_EN_BC" range="14" rwaccess="R"/> 
		<bitfield id="ADPSUPPORT" width="1" begin="12" end="12" resetval="0x0" description="DWC_USB3_EN_ADP" range="12" rwaccess="R"/> 
		<bitfield id="GHWPARAMS6_7" width="1" begin="7" end="7" resetval="0x0" description="DWC_USB3_EN_FPGA" range="7" rwaccess="R"/> 
		<bitfield id="GHWPARAMS6_6" width="1" begin="6" end="6" resetval="0x0" description="DWC_USB3_EN_DBG_PORTS" range="6" rwaccess="R"/> 
		<bitfield id="GHWPARAMS6_5_0" width="6" begin="5" end="0" resetval="0x32" description="DWC_USB3_PSQ_FIFO_DEPTH" range="5 - 0" rwaccess="R"/>
	</register>
	<register id="VBP2AHB_WRAP__CONTROLLER_VBP__USB3_CORE_GBL_GHWPARAMS7" acronym="VBP2AHB_WRAP__CONTROLLER_VBP__USB3_CORE_GBL_GHWPARAMS7" offset="0x5C" width="32" description="Global Hardware Parameters Register 7

This register contains the hardware configuration options that you can select in the coreConsultant GUI.  

For a description of each parameter, refer to the Parameter Descriptions chapter in the Databook. This information is also available in coreConsultant by right-clicking the parameter label and selecting What's This or by clicking the Help tab.  

Note: 

Some of the global hardware parameters are not currently modifiable in coreConsultant. These settings are in the  &#38;#60;workspace>/src/DWC_usb3_params.v file. you must not change them.">
		<bitfield id="GHWPARAMS7_31_16" width="16" begin="31" end="16" resetval="0x0" description="DWC_USB3_RAM2_DEPTH" range="31 - 16" rwaccess="R"/> 
		<bitfield id="GHWPARAMS7_15_0" width="16" begin="15" end="0" resetval="0x0" description="DWC_USB3_RAM1_DEPTH" range="15 - 0" rwaccess="R"/>
	</register>
	<register id="VBP2AHB_WRAP__CONTROLLER_VBP__USB3_CORE_GBL_GDBGFIFOSPACE" acronym="VBP2AHB_WRAP__CONTROLLER_VBP__USB3_CORE_GBL_GDBGFIFOSPACE" offset="0x60" width="32" description="Global Debug Queue/FIFO Space Available Register

Bit Bash test should not be done on this debug register.">
		<bitfield id="SPACE_AVAILABLE" width="16" begin="31" end="16" resetval="0x12" description="SPACE_AVAILABLE" range="31 - 16" rwaccess="R"/> 
		<bitfield id="FIFO_QUEUE_SELECT" width="9" begin="8" end="0" resetval="0x0" description="FIFO/Queue Select [or] Port-Select  - FIFO/Queue Select[8:5] indicates the FIFO/Queue Type  - FIFO/Queue Select[4:0] indicates the FIFO/Queue Number For example, 9'b0_0010_0001 refers to RxFIFO_1 and 9'b0_0101_1110 refers to TxReqQ_30.  - 9'b0_0001_1111 to 9'b0_0000_0000: TxFIFO_31 to TxFIFO_0  - 9'b0_0011_1111 to 9'b0_0010_0000: RxFIFO_31 to RxFIFO_0  - 9'b0_0101_1111 to 9'b0_0100_0000: TxReqQ_31 to TxReqQ_0  - 9'b0_0111_1111 to 9'b0_0110_0000: RxReqQ_31 to RxReqQ_0  - 9'b0_1001_1111 to 9'b0_1000_0000: RxInfoQ_31 to RxInfoQ_0  - 9'b0_1010_0000: DescFetchQ_0 [for backwards compatibility]  - 9'b0_1010_0001: EventQ_0 [for backwards compatibility]  - 9'b0_1010_0010: ProtocolStatusQ_0  - 9'b0_1101_1111 to 9'b0_1110_0000: DescFetchQ_31 to DescFetchQ_0  - 9'b0_1111_1111 to 9'b0_1110_0000: WriteBack/EventQ_31 to WriteBack/EventQ_0  - 9'b1_0000_0111 to 9'b1_0000_0000: AuxEventQ_7 to AuxEventQ_0 [if EN_SEPARATE_DESC_QUEUES=1] Port-Select[3:0] selects the port-number when accessing GDBGLTSSM register." range="8 - 0" rwaccess="R/W"/>
	</register>
	<register id="VBP2AHB_WRAP__CONTROLLER_VBP__USB3_CORE_GBL_GDBGLTSSM" acronym="VBP2AHB_WRAP__CONTROLLER_VBP__USB3_CORE_GBL_GDBGLTSSM" offset="0x64" width="32" description="Global Debug LTSSM Register

In multi-port host configuration, the port-number is defined by Port-Select[3:0] field in the GDBGFIFOSPACE register.  

Note: 
 - GDBGLTSSM register is not applicable for USB 2.0-only mode.
 - Bit Bash test should not be done on this debug register.">
		<bitfield id="RXELECIDLE" width="1" begin="30" end="30" resetval="0x1" description="RxElecidle  For description of RxElecIdle, see table 5-4, Status Interface Signals of the PIPE3 Specification." range="30" rwaccess="R"/> 
		<bitfield id="LTDBTIMEOUT" width="1" begin="26" end="26" resetval="0x0" description="LTDB Timeout [LTDBTimeout]" range="26" rwaccess="R"/> 
		<bitfield id="LTDBLINKSTATE" width="4" begin="25" end="22" resetval="0x4" description="LTDB Link State [LTDBLinkState]" range="25 - 22" rwaccess="R"/> 
		<bitfield id="LTDBSUBSTATE" width="4" begin="21" end="18" resetval="0x0" description="LTDB Sub-State [LTDBSubState]" range="21 - 18" rwaccess="R"/> 
		<bitfield id="ELASTICBUFFERMODE" width="1" begin="17" end="17" resetval="0x0" description="Elastic Buffer Mode [ElasticBufferMode]  For field definition, refer to Table 5-3 of the PIPE3 specification." range="17" rwaccess="R"/> 
		<bitfield id="TXELECLDLE" width="1" begin="16" end="16" resetval="0x1" description="Tx Elec Idle [TxElecIdle]  For field definition, refer to Table 5-3 of the PIPE3 specification." range="16" rwaccess="R"/> 
		<bitfield id="RXPOLARITY" width="1" begin="15" end="15" resetval="0x0" description="Rx Polarity [RxPolarity]  For field definition, refer to Table 5-3 of the PIPE3 specification." range="15" rwaccess="R"/> 
		<bitfield id="TXDETRXLOOPBACK" width="1" begin="14" end="14" resetval="0x0" description="Tx Detect Rx/Loopback [TxDetRxLoopback]  For field definition, refer to Table 5-3 of the PIPE3 specification." range="14" rwaccess="R"/> 
		<bitfield id="LTDBPHYCMDSTATE" width="3" begin="13" end="11" resetval="0x0" description="LTSSM PHY command State [LTDBPhyCmdState]  - 000: PHY_IDLE [PHY command state is in IDLE. No PHY request pending]  - 001: PHY_DET [Request to start Receiver detection]  - 010: PHY_DET_3 [Wait for Phy_Status [Receiver detection]]  - 011: PHY_PWR_DLY [Delay Pipe3_PowerDown P0 -> P1/P2/P3 request]  - 100: PHY_PWR_A [Delay for internal logic]  - 101: PHY_PWR_B [Wait for Phy_Status[Power state change request]]" range="13 - 11" rwaccess="R"/> 
		<bitfield id="POWERDOWN" width="2" begin="10" end="9" resetval="0x2" description="POWERDOWN [PowerDown]  For field definition, refer to Table 5-3 of the PIPE3 specification." range="10 - 9" rwaccess="R"/> 
		<bitfield id="RXEQTRAIN" width="1" begin="8" end="8" resetval="0x0" description="RxEq Train  For field definition, refer to Table 5-3 of the PIPE3 specification." range="8" rwaccess="R"/> 
		<bitfield id="TXDEEMPHASIS" width="2" begin="7" end="6" resetval="0x1" description="TXDEEMPHASIS [TxDeemphasis]  For field definition, refer to Table 5-3 of the PIPE3 specification." range="7 - 6" rwaccess="R"/> 
		<bitfield id="LTDBCLKSTATE" width="3" begin="5" end="3" resetval="0x0" description="LTSSM Clock State [LTDBClkState]    In multi-port host configuration, the port number is defined by Port-Select[3:0] field in the GDBGFIFOSPACE register.  Note: GDBGLTSSM register is not applicable for USB 2.0-only mode.   - 000: CLK_NORM [PHY is in non-P3 state and PCLK is running]      - 001: CLK_TO_P3 [P3 entry request to PHY].  - 010: CLK_WAIT1 [Wait for Phy_Status [P3 request]].            - 011: CLK_P3 [PHY is in P3 and PCLK is not running].  - 100: CLK_TO_P0 [P3 exit request to PHY].            - 101: CLK_WAIT2 [Wait for Phy_Status [P3 exit request]]" range="5 - 3" rwaccess="R"/> 
		<bitfield id="TXSWING" width="1" begin="2" end="2" resetval="0x0" description="Tx Swing [TxSwing]  For field definition, refer to Table 5-3 of the PIPE3 specification." range="2" rwaccess="R"/> 
		<bitfield id="RXTERMINATION" width="1" begin="1" end="1" resetval="0x0" description="Rx Termination [RxTermination]  For details on DWC_USB3_PIPE_RXTERM_RESET_VAL, refer to &#38;#60;workspace>/src/DWC_usb3_params.v" range="1" rwaccess="R"/> 
		<bitfield id="TXONESZEROS" width="1" begin="0" end="0" resetval="0x0" description="Tx Ones/Zeros [TxOnesZeros]  For field definition, refer to Table 5-3 of the PIPE3 specification." range="0" rwaccess="R"/>
	</register>
	<register id="VBP2AHB_WRAP__CONTROLLER_VBP__USB3_CORE_GBL_GDBGLNMCC" acronym="VBP2AHB_WRAP__CONTROLLER_VBP__USB3_CORE_GBL_GDBGLNMCC" offset="0x68" width="32" description="Global Debug LNMCC Register

Bit Bash test should not be done on this debug register.">
		<bitfield id="LNMCC_BERC" width="9" begin="8" end="0" resetval="0x0" description="This field indicates the bit error rate information for the port selected in the GDBGFIFOSPACE.PortSelect field.   This field is for debug purposes only." range="8 - 0" rwaccess="R"/>
	</register>
	<register id="VBP2AHB_WRAP__CONTROLLER_VBP__USB3_CORE_GBL_GDBGBMU" acronym="VBP2AHB_WRAP__CONTROLLER_VBP__USB3_CORE_GBL_GDBGBMU" offset="0x6C" width="32" description="Global Debug BMU Register

Bit Bash test should not be done on this debug register.">
		<bitfield id="BMU_BCU" width="24" begin="31" end="8" resetval="0x0" description="BMU_BCU Debug information" range="31 - 8" rwaccess="R"/> 
		<bitfield id="BMU_DCU" width="4" begin="7" end="4" resetval="0x0" description="BMU_DCU Debug information" range="7 - 4" rwaccess="R"/> 
		<bitfield id="BMU_CCU" width="4" begin="3" end="0" resetval="0x0" description="BMU_CCU Debug information" range="3 - 0" rwaccess="R"/>
	</register>
	<register id="VBP2AHB_WRAP__CONTROLLER_VBP__USB3_CORE_GBL_GDBGLSPMUX_HST" acronym="VBP2AHB_WRAP__CONTROLLER_VBP__USB3_CORE_GBL_GDBGLSPMUX_HST" offset="0x70" width="32" description="Global Debug LSP MUX Register - Host

This register is for internal use only.

If DWC_USB3_PRESERVE_LOGIC_ANALYZER_SELECT is enabled during controller configuration, then the default values readout is X (Undefined).

Bit Bash test should not be done on this debug register.">
		<bitfield id="LOGIC_ANALYZER_TRACE" width="8" begin="23" end="16" resetval="0x63" description="logic_analyzer_trace Port MUX Select  Currently only bits[21:16] are used. For details on how the mux controls the debug traces, refer to the assign logic_analyzer_trace = code section in the DWC_usb3.v file.  A value of 6'h3F drives 0s on the logic_analyzer_trace signal. If you plan to OR [instead using a mux] this signal with other trace signals in your system to generate a common trace signal, you can use this feature." range="23 - 16" rwaccess="R/W"/> 
		<bitfield id="HOSTSELECT" width="14" begin="13" end="0" resetval="0x0" description="Device LSP Select  Selects the LSP debug information presented in the GDBGLSP register in host mode." range="13 - 0" rwaccess="R/W"/>
	</register>
	<register id="VBP2AHB_WRAP__CONTROLLER_VBP__USB3_CORE_GBL_GDBGLSP" acronym="VBP2AHB_WRAP__CONTROLLER_VBP__USB3_CORE_GBL_GDBGLSP" offset="0x74" width="32" description="Global Debug LSP Register

This register is for internal debug purposes only.

This register is for internal use only.

If DWC_USB3_PRESERVE_LOGIC_ANALYZER_SELECT is enabled during controller configuration, then the default values readout is X (Undefined).

Bit Bash test should not be done on this debug register.">
		<bitfield id="LSPDEBUG" width="32" begin="31" end="0" resetval="0x0" description="LSP Debug Information" range="31 - 0" rwaccess="R"/>
	</register>
	<register id="VBP2AHB_WRAP__CONTROLLER_VBP__USB3_CORE_GBL_GDBGEPINFO0" acronym="VBP2AHB_WRAP__CONTROLLER_VBP__USB3_CORE_GBL_GDBGEPINFO0" offset="0x78" width="32" description="Global Debug Endpoint Information Register 0

This register is for internal use only.

If DWC_USB3_PRESERVE_LOGIC_ANALYZER_SELECT is enabled during controller configuration, then the default values readout is X (Undefined).

Bit Bash test should not be done on this debug register.">
		<bitfield id="EPDEBUG" width="32" begin="31" end="0" resetval="0x0" description="Endpoint Debug Information, bits[31:0]" range="31 - 0" rwaccess="R"/>
	</register>
	<register id="VBP2AHB_WRAP__CONTROLLER_VBP__USB3_CORE_GBL_GDBGEPINFO1" acronym="VBP2AHB_WRAP__CONTROLLER_VBP__USB3_CORE_GBL_GDBGEPINFO1" offset="0x7C" width="32" description="Global Debug Endpoint Information Register 1

This register is for internal use only.

If DWC_USB3_PRESERVE_LOGIC_ANALYZER_SELECT is enabled during controller configuration, then the default values readout is X (Undefined).

Bit Bash test should not be done on this debug register.">
		<bitfield id="EPDEBUG" width="32" begin="31" end="0" resetval="0x8388608" description="Endpoint Debug Information, bits[63:32]" range="31 - 0" rwaccess="R"/>
	</register>
	<register id="VBP2AHB_WRAP__CONTROLLER_VBP__USB3_CORE_GBL_GPRTBIMAP_HSLO" acronym="VBP2AHB_WRAP__CONTROLLER_VBP__USB3_CORE_GBL_GPRTBIMAP_HSLO" offset="0x80" width="32" description="Global High-Speed Port to Bus Instance Mapping Register - Low

This is an alternate register for the GPRTBIMAP_HS register.

 - Register fields are read-write with respect to number of port instantiated. writeAsRead constraint is added to limit side effects for unused fields. 

Note: For reset values, refer to the corresponding values in the GPRTBIMAP_HS register.">
		<bitfield id="BINUM8" width="4" begin="31" end="28" resetval="0x0" description="BINUM8: HS USB Instance Number for Port 8.   Application-programmable ID field." range="31 - 28" rwaccess="R"/> 
		<bitfield id="BINUM7" width="4" begin="27" end="24" resetval="0x0" description="BINUM7: HS USB Instance Number for Port 7.   Application-programmable ID field." range="27 - 24" rwaccess="R"/> 
		<bitfield id="BINUM6" width="4" begin="23" end="20" resetval="0x0" description="BINUM6 USB Instance Number for Port 6.  Application-programmable ID field." range="23 - 20" rwaccess="R"/> 
		<bitfield id="BINUM5" width="4" begin="19" end="16" resetval="0x0" description="BINUM5: HS USB Instance Number for Port 5.  Application-programmable ID field." range="19 - 16" rwaccess="R"/> 
		<bitfield id="BINUM4" width="4" begin="15" end="12" resetval="0x0" description="BINUM4: HS USB Instance Number for Port 4.  Application-programmable ID field." range="15 - 12" rwaccess="R"/> 
		<bitfield id="BINUM3" width="4" begin="11" end="8" resetval="0x0" description="BINUM3: HS USB Instance Number for Port 3.  Application-programmable ID field." range="11 - 8" rwaccess="R"/> 
		<bitfield id="BINUM2" width="4" begin="7" end="4" resetval="0x0" description="BINUM2: HS USB Instance Number for Port 2.  Application-programmable ID field." range="7 - 4" rwaccess="R"/> 
		<bitfield id="BINUM1" width="4" begin="3" end="0" resetval="0x0" description="BINUM1: HS USB Instance Number for Port 1.   Application-programmable ID field." range="3 - 0" rwaccess="R/W"/>
	</register>
	<register id="VBP2AHB_WRAP__CONTROLLER_VBP__USB3_CORE_GBL_GPRTBIMAP_HSHI" acronym="VBP2AHB_WRAP__CONTROLLER_VBP__USB3_CORE_GBL_GPRTBIMAP_HSHI" offset="0x84" width="32" description="Global High-Speed Port to Bus Instance Mapping Register - High

This is an alternate register for the GPRTBIMAP_HS register.

 - Register fields are read-write with respect to number of port instantiated. writeAsRead constraint is added to limit side effects for unused fields. 

Note: For reset values, refer to the corresponding values in the GPRTBIMAP register.">
		<bitfield id="BINUM15" width="4" begin="27" end="24" resetval="0x0" description="BINUM15: HS USB Instance Number for Port 15.  Application-programmable ID field." range="27 - 24" rwaccess="R"/> 
		<bitfield id="BINUM14" width="4" begin="23" end="20" resetval="0x0" description="BINUM14: HS USB Instance Number for Port 14. Application-programmable ID field." range="23 - 20" rwaccess="R"/> 
		<bitfield id="BINUM13" width="4" begin="19" end="16" resetval="0x0" description="BINUM13: HS USB Instance Number for Port 13.  Application-programmable ID field." range="19 - 16" rwaccess="R"/> 
		<bitfield id="BINUM12" width="4" begin="15" end="12" resetval="0x0" description="BINUM12: HS USB Instance Number for Port 12.  SApplication-programmable ID field." range="15 - 12" rwaccess="R"/> 
		<bitfield id="BINUM11" width="4" begin="11" end="8" resetval="0x0" description="BINUM11: HS USB Instance Number for 11.  Application-programmable ID field." range="11 - 8" rwaccess="R"/> 
		<bitfield id="BINUM10" width="4" begin="7" end="4" resetval="0x0" description="BINUM10: HS USB Instance Number for Port 10.  Application-programmable ID field." range="7 - 4" rwaccess="R"/> 
		<bitfield id="BINUM9" width="4" begin="3" end="0" resetval="0x0" description="BINUM9: HS USB Instance Number for Port 9.  Application-programmable ID field." range="3 - 0" rwaccess="R"/>
	</register>
	<register id="VBP2AHB_WRAP__CONTROLLER_VBP__USB3_CORE_GBL_GPRTBIMAP_FSLO" acronym="VBP2AHB_WRAP__CONTROLLER_VBP__USB3_CORE_GBL_GPRTBIMAP_FSLO" offset="0x88" width="32" description="Global Full-Speed Port to Bus Instance Mapping Register - Low

This is an alternate register for the GPRTBIMAP_FS register.

 - Register fields are read-write with respect to number of port instantiated. writeAsRead constraint is added to limit side effects for unused fields. 

Note: For reset values, refer to the corresponding values in the GPRTBIMAP_FS register.">
		<bitfield id="BINUM8" width="4" begin="31" end="28" resetval="0x0" description="BINUM8: FS USB Instance Number for Port 8.  Application-programmable ID field." range="31 - 28" rwaccess="R"/> 
		<bitfield id="BINUM7" width="4" begin="27" end="24" resetval="0x0" description="BINUM7: FS USB Instance Number for Port 7.   Application-programmable ID field." range="27 - 24" rwaccess="R"/> 
		<bitfield id="BINUM6" width="4" begin="23" end="20" resetval="0x0" description="BINUM6: FS USB Instance Number for Port 6.  Application-programmable ID field." range="23 - 20" rwaccess="R"/> 
		<bitfield id="BINUM5" width="4" begin="19" end="16" resetval="0x0" description="BINUM5: FS USB Instance Number for Port 5.  Application-programmable ID field." range="19 - 16" rwaccess="R"/> 
		<bitfield id="BINUM4" width="4" begin="15" end="12" resetval="0x0" description="BINUM4: FS USB Instance Number for Port 4.  Application-programmable ID field." range="15 - 12" rwaccess="R"/> 
		<bitfield id="BINUM3" width="4" begin="11" end="8" resetval="0x0" description="BINUM3: FS USB Instance Number for Port 3.  Application-programmable ID field." range="11 - 8" rwaccess="R"/> 
		<bitfield id="BINUM2" width="4" begin="7" end="4" resetval="0x0" description="BINUM2: FS USB Instance Number for Port 2.  Application-programmable ID field." range="7 - 4" rwaccess="R"/> 
		<bitfield id="BINUM1" width="4" begin="3" end="0" resetval="0x0" description="BINUM1: FS USB Instance Number for Port 1.  Application-programmable ID field." range="3 - 0" rwaccess="R/W"/>
	</register>
	<register id="VBP2AHB_WRAP__CONTROLLER_VBP__USB3_CORE_GBL_GPRTBIMAP_FSHI" acronym="VBP2AHB_WRAP__CONTROLLER_VBP__USB3_CORE_GBL_GPRTBIMAP_FSHI" offset="0x8C" width="32" description="Global Full-Speed Port to Bus Instance Mapping Register - High

This is an alternate register for the GPRTBIMAP_FS register.

 - Register fields are read-write with respect to number of port instantiated. writeAsRead constraint is added to limit side effects for unused fields. 

Note: For reset values, refer to the corresponding values in the GPRTBIMAP_FS register.">
		<bitfield id="BINUM15" width="4" begin="27" end="24" resetval="0x0" description="BINUM15: FS USB Instance Number for Port 15.  Application-programmable ID field" range="27 - 24" rwaccess="R"/> 
		<bitfield id="BINUM14" width="4" begin="23" end="20" resetval="0x0" description="BINUM14: FS USB Instance Number for Port 14.  Application-programmable ID field" range="23 - 20" rwaccess="R"/> 
		<bitfield id="BINUM13" width="4" begin="19" end="16" resetval="0x0" description="BINUM13: FS USB Instance Number for Port 13.  Application-programmable ID field" range="19 - 16" rwaccess="R"/> 
		<bitfield id="BINUM12" width="4" begin="15" end="12" resetval="0x0" description="BINUM12: FS USB Instance Number for Port 12.  Application-programmable ID field" range="15 - 12" rwaccess="R"/> 
		<bitfield id="BINUM11" width="4" begin="11" end="8" resetval="0x0" description="BINUM11: FS USB Instance Number for Port 11.  Application-programmable ID field" range="11 - 8" rwaccess="R"/> 
		<bitfield id="BINUM10" width="4" begin="7" end="4" resetval="0x0" description="BINUM10: FS USB Instance Number for Port 10.   Application-programmable ID field" range="7 - 4" rwaccess="R"/> 
		<bitfield id="BINUM9" width="4" begin="3" end="0" resetval="0x0" description="BINUM9: FS USB Instance Number for Port 9.  Application-programmable ID field." range="3 - 0" rwaccess="R"/>
	</register>
	<register id="VBP2AHB_WRAP__CONTROLLER_VBP__USB3_CORE_GBL_Reserved_94" acronym="VBP2AHB_WRAP__CONTROLLER_VBP__USB3_CORE_GBL_Reserved_94" offset="0x94" width="32" description="Future Reserved Register at offset 0x94">
		<bitfield id="RESERVED" width="32" begin="31" end="0" resetval="0x0" description="Future use Register field" range="31 - 0" rwaccess="N/A"/>
	</register>
	<register id="VBP2AHB_WRAP__CONTROLLER_VBP__USB3_CORE_GBL_Reserved_98" acronym="VBP2AHB_WRAP__CONTROLLER_VBP__USB3_CORE_GBL_Reserved_98" offset="0x98" width="32" description="Future Reserved Register at offset 0x98">
		<bitfield id="RESERVED" width="32" begin="31" end="0" resetval="0x0" description="Field for future use" range="31 - 0" rwaccess="N/A"/>
	</register>
	<register id="VBP2AHB_WRAP__CONTROLLER_VBP__USB3_CORE_GBL_GUCTL2" acronym="VBP2AHB_WRAP__CONTROLLER_VBP__USB3_CORE_GBL_GUCTL2" offset="0x9C" width="32" description="Global User Control Register 2:  

This register provides a few options for the software to control the controller behavior in the Host and device mode. Most of the options are used to improve inter-operability with different hosts and devices.">
		<bitfield id="EN_HP_PM_TIMER" width="7" begin="25" end="19" resetval="0x0" description="This register field is used to set new HP and PM timers.  - To enable PM timer, set GUCTL2[19] bit as 1.  - To enable HP timer, set GUCTL2[20] bit as 1. Default value of HP timer is 4us when HP PM timer is not enabled. when new HP timer is enabled default value is 12us. Use GUCTL2[25:21] to specify HP timer value in microseconds." range="25 - 19" rwaccess="R/W"/> 
		<bitfield id="NOLOWPWRDUR" width="4" begin="18" end="15" resetval="0x0" description="No Low Power Duration [NOLOWPWRDUR]  This bit is applicable for device mode only and is ignored in host mode.  After starting a transfer on a SS ISOC endpoint, the application must program these bits  to prevent the device to lose frame synchronization over a period of time. Based on this count-down counter, the device will wake itself from U1/U2 low power states. After entering to U0 state and receiving two ITPs [which will sync-up the host and the device], U1/U2 low power entry is allowed.  Each count represents the duration in terms of milliseconds. For example, a value of 3 represents 3ms.  Note:  - To disable this feature, set this field to 4'b0.  - These bits are applicable only in device mode and ignored in host mode.  - Some xHCI hosts do not send ITPs when performing ISOC transfers when the link enters U1/U2 low power states. This causes the device to lose frame synchronization over a period of time resulting in ISOC packets being dropped." range="18 - 15" rwaccess="R/W"/> 
		<bitfield id="RST_ACTBITLATER" width="1" begin="14" end="14" resetval="0x0" description="Enable clearing of the command active bit for the ENDXFER command after the command execution is completed.   This bit is valid in device mode only." range="14" rwaccess="R/W"/> 
		<bitfield id="RESERVED" width="1" begin="13" end="13" resetval="0x0" description="Reserved for future use" range="13" rwaccess="N/A"/> 
		<bitfield id="ENABLEEPCACHEEVICT" width="1" begin="12" end="12" resetval="0x0" description="Enable Evicting Endpoint cache after Flow Control for bulk endpoints.  In 3.00a release, a performance enhancement was done to keep the non-stream capable bulk IN endpoint in cache after flow control. Setting this bit will disable this enhancement. This should be set only for debug purpose." range="12" rwaccess="R/W"/> 
		<bitfield id="DISABLECFC" width="1" begin="11" end="11" resetval="0x0" description="Disable xHCI Errata Feature Contiguous Frame ID Capability  This field controls the xHCI Errata feature Contiguous FrameID capability. When set, the xHCI HCCPARAMS1 bit 11 will be set to 0 indicating that CFC is not supported. Disable this feature only if your application cannot tolerate Misssed Service Error events for Isoc transfers, and your system latencies are large to cause Missed Service errors even if the software is following the Isochronous Thresholding rules." range="11" rwaccess="R/W"/> 
		<bitfield id="RXPINGDURATION" width="6" begin="10" end="5" resetval="0x0" description="Recieve Ping Maximum Duration   This field is relevant to Host mode and controls the maximum duration of received LFPS to be treated as a Ping LFPS. The Max duration of the Ping LFPS is controlled by programming this value and is in terms of 8 ns granularity. Eg: A value of 32 indicates 256 ns." range="10 - 5" rwaccess="R/W"/> 
		<bitfield id="TXPINGDURATION" width="5" begin="4" end="0" resetval="0x0" description="Transmit Ping Maximum Duration   This field is relevant to Device mode and controls the maximum duration for which the controller should instruct the PHY to transmit a Ping LFPS. The duration of the Ping LFPS is controlled by programming this value and is in terms of 8 ns granularity. Eg: A value of 13 indicates 104 ns." range="4 - 0" rwaccess="R/W"/>
	</register>
	<register id="VBP2AHB_WRAP__CONTROLLER_VBP__USB3_CORE_GBL_GHWPARAMS8" acronym="VBP2AHB_WRAP__CONTROLLER_VBP__USB3_CORE_GBL_GHWPARAMS8" offset="0x500" width="32" description="Global Hardware Parameters Register 8

This register contains the hardware configuration options that you can select in the coreConsultant GUI.  

For a description of each parameter, refer to the Parameter Descriptions chapter in the Databook. This information is also available in coreConsultant by right-clicking the parameter label and selecting What's This or by clicking the Help tab.  

Note: 

Some of the global hardware parameters are not currently modifiable in coreConsultant. These settings are in the  &#38;#60;workspace>/src/DWC_usb3_params.v file. you must not change them.">
		<bitfield id="GHWPARAMS8_32_0" width="32" begin="31" end="0" resetval="0x1632" description="DWC_USB3_DCACHE_DEPTH_INFO" range="31 - 0" rwaccess="R"/>
	</register>
	<register id="VBP2AHB_WRAP__CONTROLLER_VBP__USB3_CORE_GBL_GUCTL3" acronym="VBP2AHB_WRAP__CONTROLLER_VBP__USB3_CORE_GBL_GUCTL3" offset="0x50C" width="32" description="Global User Control Register 3

This register provides a few options for the software to control the controller behavior in the Host mode. Most of the options are used to improve host inter-operability with different devices.">
		<bitfield id="SCH_PING_EARLY" width="1" begin="16" end="16" resetval="0x0" description="Enable SuperSpeed Ping Transaction Packet scheduling early in the microframe.  This bit is valid in Host mode only." range="16" rwaccess="R/W"/>
	</register>
	<register id="VBP2AHB_WRAP__CONTROLLER_VBP__USB3_CORE_GBL_GTXFIFOPRIDEV" acronym="VBP2AHB_WRAP__CONTROLLER_VBP__USB3_CORE_GBL_GTXFIFOPRIDEV" offset="0x510" width="32" description="Global Device TX FIFO DMA Priority Register

This register specifies the relative DMA priority level among the Device TXFIFOs (one per IN endpoint). Each register bit[n] controls the priority (1: high, 0: low) of each TXFIFO[n]. When multiple TXFIFOs compete for DMA service at a given time (that is, multiple TXQs contain TX DMA requests and their corresponding TXFIFOs have space available), the TX DMA arbiter grants access on a packet-basis in the following manner:
 - 1. High-priority TXFIFOs are granted access using round-robin arbitration
 - 2. Low-priority TXFIFOs are granted access using round-robin arbitration only after the high-priority TXFIFOs have no further processing to do (that is, either the TXQs are empty or the corresponding TXFIFOs are full).
For scatter-gather packets, the arbiter grants successive DMA requests to the same FIFO until the entire packet is completed.

When configuring periodic IN endpoints, software must set register bit[n]=1, where n is the TXFIFO assignment. This ensures that the DMA for isochronous or interrupt IN endpoints are prioritized over bulk or control IN endpoints.

This register is present only when the controller is configured to operate in the device mode (includes DRD mode). The register size corresponds to the number of Device IN endpoints.

Note
 - Since the device mode uses only one RXFIFO, there is no Device RXFIFO DMA Priority Register.">
		<bitfield id="GTXFIFOPRIDEV" width="16" begin="15" end="0" resetval="0x0" description="Device TxFIFO priority" range="15 - 0" rwaccess="R/W"/>
	</register>
	<register id="VBP2AHB_WRAP__CONTROLLER_VBP__USB3_CORE_GBL_GTXFIFOPRIHST" acronym="VBP2AHB_WRAP__CONTROLLER_VBP__USB3_CORE_GBL_GTXFIFOPRIHST" offset="0x518" width="32" description="Global Host TX FIFO DMA Priority Register

This register specifies the relative DMA priority level among the Host TXFIFOs (one per USB bus instance) within the associated speed group (SS or HS/FSLS). Each register bit[n] controls the priority (1: high, 0: low) of TXFIFO[n] within a speed group. When multiple TXFIFOs compete for DMA service at a given time (i.e., multiple TXQs contain TX DMA requests and their corresponding TXFIFOs have space available), the TX DMA arbiter grants access on a packet-basis in the following manner:
 - 1. Among the FIFOs in the same speed group (SS or HS/FSLS): 
 a. High-priority TXFIFOs are granted access using round-robin arbitration 
 b. Low-priority TXFIFOs are granted access using round-robin arbitration only after the high-priority TXFIFOs have no further processing to do (that is, either the TXQs are empty or the corresponding TXFIFOs are full).
 - 2. The TX DMA arbiter prioritizes the SS speed group or HS/FSLS speed group according to the ratio programmed in the GDMAHLRATIO register.
For scatter-gather packets, the arbiter grants successive DMA requests to the same FIFO until the entire packet is completed.

This register is present only when the controller is configured to operate in the host mode (includes DRD mode). The register size corresponds to the number of configured USB bus instances. for example, in the default configuration, there are 3 USB bus instances (1 SS, 1 HS, and 1 FSLS).">
		<bitfield id="GTXFIFOPRIHST" width="3" begin="2" end="0" resetval="0x0" description="Host TxFIFO priority" range="2 - 0" rwaccess="R/W"/>
	</register>
	<register id="VBP2AHB_WRAP__CONTROLLER_VBP__USB3_CORE_GBL_GRXFIFOPRIHST" acronym="VBP2AHB_WRAP__CONTROLLER_VBP__USB3_CORE_GBL_GRXFIFOPRIHST" offset="0x51C" width="32" description="Global Host RX FIFO DMA Priority Register

This register specifies the relative DMA priority level among the Host RXFIFOs (one per USB bus instance) within the associated speed group (SS or HS/FSLS). Each register bit[n] controls the priority (1: high, 0: low) of RXFIFO[n] within a speed group. When multiple RXFIFOs compete for DMA service at a given time (i.e., multiple RXQs contain RX DMA requests and their corresponding RXFIFOs have data available), the RX DMA arbiter grants access on a packet-basis in the following manner:
 - 1. Among the FIFOs in the same speed group (SS or HS/FSLS): 
 a. High-priority RXFIFOs are granted access using round-robin arbitration 
 b. Low-priority RXFIFOs are granted access using round-robin arbitration only after high-priority RXFIFOs have no further processing to do (that is, either the RXQs are empty or the corresponding RXFIFOs do not have the required data).
 - 2. The RX DMA arbiter prioritizes the SS speed group or HS/FSLS speed group according to the ratio programmed in the GDMAHLRATIO register.
For scatter-gather packets, the arbiter grants successive DMA requests to the same FIFO until the entire packet is completed.

This register is present only when the controller is configured to operate in the host mode (includes DRD mode). The register size corresponds to the number of configured USB bus instances. for example, in the default configuration, there are 3 USB bus instances (1 SS, 1 HS, and 1 FSLS).">
		<bitfield id="GRXFIFOPRIHST" width="3" begin="2" end="0" resetval="0x0" description="Host RxFIFO priority" range="2 - 0" rwaccess="R/W"/>
	</register>
	<register id="VBP2AHB_WRAP__CONTROLLER_VBP__USB3_CORE_GBL_GDMAHLRATIO" acronym="VBP2AHB_WRAP__CONTROLLER_VBP__USB3_CORE_GBL_GDMAHLRATIO" offset="0x524" width="32" description="Global Host FIFO DMA High-Low Priority Ratio Register

This register specifies the relative priority of the SS FIFOs with respect to the HS/FSLS FIFOs. The DMA arbiter prioritizes the HS/FSLS round-robin arbiter group every DMA High-Low Priority Ratio grants as indicated in the register separately for TX and RX.

To illustrate, consider that all FIFOs are requesting access simultaneously, and the ratio is 4. SS gets priority for 4 packets, HS/FSLS gets priority for 1 packet, SS gets priority for 4 packets, HS/FSLS gets priority for 1 packet, and so on.

If FIFOs from both speed groups are not requesting access simultaneously then,
 - if SS got grants 4 out of the last 4 times, then HS/FSLS get the priority on any future request.
 - if HS/FSLS got the grant last time, SS gets the priority on the next request.
 - if there is a valid request on either SS or HS/FSLS, a grant is always awarded. there is no idle.
This register is present if the controller is configured to operate in host mode (includes DRD).">
		<bitfield id="HSTRXFIFO" width="5" begin="12" end="8" resetval="0x0" description="Host RXFIFO DMA High-Low Priority" range="12 - 8" rwaccess="R/W"/> 
		<bitfield id="HSTTXFIFO" width="5" begin="4" end="0" resetval="0x0" description="Host TXFIFO DMA High-Low Priority" range="4 - 0" rwaccess="R/W"/>
	</register>
	<register id="VBP2AHB_WRAP__CONTROLLER_VBP__USB3_CORE_GBL_GFLADJ" acronym="VBP2AHB_WRAP__CONTROLLER_VBP__USB3_CORE_GBL_GFLADJ" offset="0x530" width="32" description="Global Frame Length Adjustment Register

This register provides options for the software to control the controller behavior with respect to SOF (Start of Frame) and ITP (Isochronous Timestamp Packet) timers and frame timer functionality. It provides an option to override the fladj_30mhz_reg sideband signal. In addition, it enables running SOF or ITP frame timer counters completely from the ref_clk. This facilitates hardware LPM in host mode with the SOF or ITP counters being run from the ref_clk signal.">
		<bitfield id="GFLADJ_REFCLK_240MHZDECR_PLS1" width="1" begin="31" end="31" resetval="0x0" description="GFLADJ_REFCLK_240MHZDECR_PLS1  This field indicates that the decrement value that the controller applies for each ref_clk  must be GFLADJ_REFCLK_240MHZ_DECR and GFLADJ_REFCLK_240MHZ_DECR +1 alternatively on each ref_clk.  Set this bit to a '1' only if GFLADJ_REFCLK_LPM_SEL is set to '1' and the fractional component of 240/ref_frequency is greater than or equal to 0.5.   Examples:  If the ref_clk is 19.2 MHz then  - GUCTL.REF_CLK_PERIOD = 52  - GFLADJ.GFLADJ_REFCLK_240MHZ_DECR = [240/19.2] = 12.5  - GFLADJ.GFLADJ_REFCLK_240MHZDECR_PLS1 = 1 If the ref_clk is 24 MHz then  - GUCTL.REF_CLK_PERIOD = 41  - GFLADJ.GFLADJ_REFCLK_240MHZ_DECR = [240/24] = 10  - GFLADJ.GFLADJ_REFCLK_240MHZDECR_PLS1 = 0" range="31" rwaccess="R/W"/> 
		<bitfield id="GFLADJ_REFCLK_240MHZ_DECR" width="7" begin="30" end="24" resetval="0x0" description="This field indicates the decrement value that the controller applies for each ref_clk in order to derive a frame timer in terms of a 240-MHz clock.   This field must be programmed to a non-zero value only if GFLADJ_REFCLK_LPM_SEL is set to '1'.  The value is derived as follows:  GFLADJ_REFCLK_240MHZ_DECR = 240/ref_clk_frequency  Examples: If the ref_clk is 24 MHz then  - GUCTL.REF_CLK_PERIOD = 41  - GFLADJ.GFLADJ_REFCLK_240MHZ_DECR = 240/24 = 10 If the ref_clk is 48 MHz then  - GUCTL.REF_CLK_PERIOD = 20  - GFLADJ.GFLADJ_REFCLK_240MHZ_DECR = 240/48 = 5 If the ref_clk is 17 MHz then  - GUCTL.REF_CLK_PERIOD = 58  - GFLADJ.GFLADJ_REFCLK_240MHZ_DECR = 240/17 = 14" range="30 - 24" rwaccess="R/W"/> 
		<bitfield id="GFLADJ_REFCLK_LPM_SEL" width="1" begin="23" end="23" resetval="0x0" description="This bit enables the functionality of running SOF/ITP counters on the ref_clk.   This bit must not be set to '1' if GCTL.SOFITPSYNC bit is set to '1'.   Similarly, if GFLADJ_REFCLK_LPM_SEL set to '1', GCTL.SOFITPSYNC must not be set to '1'.    In device mode, setting this bit to '1' enables SOF tracking using ref_clk.  When GFLADJ_REFCLK_LPM_SEL is set to '1' the overloading of the suspend control of the USB 2.0 first port PHY [UTMI/ULPI] with USB 3.0 port states is removed.  For example, for Synopsys PHY, the COMMONONN signal can be tied to '1'.   Note that the ref_clk frequencies supported in this mode are 16/17/19.2/20/24/39.7/40 MHz. The utmi_clk[0] signal of the controller must be connected to the FREECLK of the PHY.  Note: If you set this bit to '1', the GUSB2PHYCFG.U2_FREECLK_EXISTS bit must be set to '0'." range="23" rwaccess="R/W"/> 
		<bitfield id="RESERVED" width="1" begin="22" end="22" resetval="0x0" description="Reserved for future use" range="22" rwaccess="N/A"/> 
		<bitfield id="GFLADJ_REFCLK_FLADJ" width="14" begin="21" end="8" resetval="0x0" description="This field indicates the frame length adjustment to be applied when SOF/ITP counter is running on the ref_clk.   This register value is used to adjust the ITP interval when GCTL[SOFITPSYNC] is set to '1'. SOF and ITP interval when GLADJ.GFLADJ_REFCLK_LPM_SEL is set to '1'.  This field must be programmed to a non-zero value only if GFLADJ_REFCLK_LPM_SEL is set to '1' or GCTL.SOFITPSYNC is set to '1'.  The value is derived as follows:  FLADJ_REF_CLK_FLADJ=[[125000/ref_clk_period_integer]-[125000/ref_clk_period]] * ref_clk_period where  - the ref_clk_period_integer is the integer value of the ref_clk period got by truncating the decimal [fractional] value that is programmed in the GUCTL.REF_CLK_PERIOD field.  - the ref_clk_period is the ref_clk period including the fractional value. Examples: If the ref_clk is 24 MHz then  - GUCTL.REF_CLK_PERIOD = 41  - GFLADJ.GLADJ_REFCLK_FLADJ = [[125000/41]-[125000/41.6666]]*41.6666 = 2032 [ignoring the fractional value] If the ref_clk is 48 MHz then  - GUCTL.REF_CLK_PERIOD = 20  - GFLADJ.GLADJ_REFCLK_FLADJ = [[125000/20]-[125000/20.8333]]*20.8333 = 5208 [ignoring the fractional value]" range="21 - 8" rwaccess="R/W"/> 
		<bitfield id="GFLADJ_30MHZ_SDBND_SEL" width="1" begin="7" end="7" resetval="0x0" description="GFLADJ_30MHZ_SDBND_SEL  This field selects whether to use the input signal fladj_30mhz_reg or the GFLADJ.GFLADJ_30MHZ to adjust the frame length for the SOF/ITP. When this bit is set to,  - 1, the controller uses the register field GFLADJ.GFLADJ_30MHZ value  - 0, the controller uses the input signal fladj_30mhz_reg value" range="7" rwaccess="R/W"/> 
		<bitfield id="RESERVED" width="1" begin="6" end="6" resetval="0x0" description="Reserved for future use" range="6" rwaccess="N/A"/> 
		<bitfield id="GFLADJ_30MHZ" width="6" begin="5" end="0" resetval="0x0" description="GFLADJ_30MHZ  This field indicates the value that is used for frame length adjustment instead of considering from the sideband input signal fladj_30mhz_reg.   This enables post-silicon frame length adjustment in case the input signal fladj_30mhz_reg is connected to a wrong value or is not valid.   For details on how to set this value, refer to section 5.2.4, Frame Length Adjustment Register [FLADJ], of the  xHCI Specification." range="5 - 0" rwaccess="R/W"/>
	</register>
</module>