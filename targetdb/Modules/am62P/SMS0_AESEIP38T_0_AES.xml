<module name="SMS0_AESEIP38T_0_AES" acronym="" XML_version="1.0" HW_revision="n/a" description="">
	<register id="TIFS_AES38T_S_AES_KEY2_6" acronym="TIFS_AES38T_S_AES_KEY2_6" offset="0x0" width="32" description="">
		<bitfield id="KEY" width="32" begin="31" end="0" resetval="0x0" description="Key Data This register contains the 32-bit key data for the AES module.  Initial key for XTS operations  For a Host write operation, these registers must be written with the 128, 192 or 256-bit key for a subsequent AES operation. The key size equals the AES_KEY1 size. For a Host write operation, these registers must be written with the new values to be subsequently transferred to the AES Engine. OR Pre-calculated CBC-MAC third key (K3), used to perform a final XOR operation on the last input data block. OR This register is used to store intermediate values and must be initialized with zeroes when writing a new GCM context. OR Used in f8/f9 algorithm" range="31 - 0" rwaccess="R/W"/>
	</register>
	<register id="TIFS_AES38T_S_AES_KEY2_7" acronym="TIFS_AES38T_S_AES_KEY2_7" offset="0x4" width="32" description="">
		<bitfield id="KEY" width="32" begin="31" end="0" resetval="0x0" description="Key Data This register contains the 32-bit key data for the AES module.  Initial key for XTS operations  For a Host write operation, these registers must be written with the 128, 192 or 256-bit key for a subsequent AES operation. The key size equals the AES_KEY1 size. For a Host write operation, these registers must be written with the new values to be subsequently transferred to the AES Engine. OR Pre-calculated CBC-MAC third key (K3), used to perform a final XOR operation on the last input data block." range="31 - 0" rwaccess="R/W"/>
	</register>
	<register id="TIFS_AES38T_S_AES_KEY2_4" acronym="TIFS_AES38T_S_AES_KEY2_4" offset="0x8" width="32" description="">
		<bitfield id="KEY" width="32" begin="31" end="0" resetval="0x0" description="Key Data This register contains the 32-bit key data for the AES module.  Initial key for XTS operations  For a Host write operation, these registers must be written with the 128, 192 or 256-bit key for a subsequent AES operation. The key size equals the AES_KEY1 size. For a Host write operation, these registers must be written with the new values to be subsequently transferred to the AES Engine. OR Pre-calculated CBC-MAC third key (K3), used to perform a final XOR operation on the last input data block." range="31 - 0" rwaccess="R/W"/>
	</register>
	<register id="TIFS_AES38T_S_AES_KEY2_5" acronym="TIFS_AES38T_S_AES_KEY2_5" offset="0xC" width="32" description="">
		<bitfield id="KEY" width="32" begin="31" end="0" resetval="0x0" description="Key Data This register contains the 32-bit key data for the AES module.  Initial key for XTS operations  For a Host write operation, these registers must be written with the 128, 192 or 256-bit key for a subsequent AES operation. The key size equals the AES_KEY1 size. For a Host write operation, these registers must be written with the new values to be subsequently transferred to the AES Engine. OR Pre-calculated CBC-MAC third key (K3), used to perform a final XOR operation on the last input data block." range="31 - 0" rwaccess="R/W"/>
	</register>
	<register id="TIFS_AES38T_S_AES_KEY2_2" acronym="TIFS_AES38T_S_AES_KEY2_2" offset="0x10" width="32" description="">
		<bitfield id="KEY" width="32" begin="31" end="0" resetval="0x0" description="Key Data This register contains the 32-bit key data for the AES module.  Initial key for XTS operations  For a Host write operation, these registers must be written with the 128, 192 or 256-bit key for a subsequent AES operation. The key size equals the AES_KEY1 size. For a Host write operation, these registers must be written with the new values to be subsequently transferred to the AES Engine. OR Pre-calculated CBC-MAC second key (K2), used to perform a final XOR operation on the last input data block. OR Hash key, can be calculated internal or written via these registers. Only used for GHASH (GCM) modes. For a Host write operation, these registers must be written with the new values to be subsequently transferred to the AES Engine. OR These 128-bits are used to store the CKKM / IKKM value for f8 OR These 128-bits are used to store the CKKM / IKKM value for f9" range="31 - 0" rwaccess="R/W"/>
	</register>
	<register id="TIFS_AES38T_S_AES_KEY2_3" acronym="TIFS_AES38T_S_AES_KEY2_3" offset="0x14" width="32" description="">
		<bitfield id="KEY" width="32" begin="31" end="0" resetval="0x0" description="Key Data This register contains the 32-bit key data for the AES module.  Initial key for XTS operations  For a Host write operation, these registers must be written with the 128, 192 or 256-bit key for a subsequent AES operation. The key size equals the AES_KEY1 size. For a Host write operation, these registers must be written with the new values to be subsequently transferred to the AES Engine. OR Pre-calculated CBC-MAC second key (K2), used to perform a final XOR operation on the last input data block. OR Hash key, can be calculated internal or written via these registers. Only used for GHASH (GCM) modes. For a Host write operation, these registers must be written with the new values to be subsequently transferred to the AES Engine. OR These 128-bits are used to store the CKKM / IKKM value for f8 OR These 128-bits are used to store the CKKM / IKKM value for f9" range="31 - 0" rwaccess="R/W"/>
	</register>
	<register id="TIFS_AES38T_S_AES_KEY2_0" acronym="TIFS_AES38T_S_AES_KEY2_0" offset="0x18" width="32" description="">
		<bitfield id="KEY" width="32" begin="31" end="0" resetval="0x0" description="Key Data This register contains the 32-bit key data for the AES module.  Initial key for XTS operations  For a Host write operation, these registers must be written with the 128, 192 or 256-bit key for a subsequent AES operation. The key size equals the AES_KEY1 size. For a Host write operation, these registers must be written with the new values to be subsequently transferred to the AES Engine. OR Pre-calculated CBC-MAC second key (K2), used to perform a final XOR operation on the last input data block. OR Hash key, can be calculated internal or written via these registers. Only used for GHASH (GCM) modes. For a Host write operation, these registers must be written with the new values to be subsequently transferred to the AES Engine. OR These 128-bits are used to store the CKKM / IKKM value for f8 OR These 128-bits are used to store the CKKM / IKKM value for f9" range="31 - 0" rwaccess="R/W"/>
	</register>
	<register id="TIFS_AES38T_S_AES_KEY2_1" acronym="TIFS_AES38T_S_AES_KEY2_1" offset="0x1C" width="32" description="">
		<bitfield id="KEY" width="32" begin="31" end="0" resetval="0x0" description="Key Data This register contains the 32-bit key data for the AES module.  Initial key for XTS operations  For a Host write operation, these registers must be written with the 128, 192 or 256-bit key for a subsequent AES operation. The key size equals the AES_KEY1 size. For a Host write operation, these registers must be written with the new values to be subsequently transferred to the AES Engine. OR Pre-calculated CBC-MAC second key (K2), used to perform a final XOR operation on the last input data block. OR Hash key, can be calculated internal or written via these registers. Only used for GHASH (GCM) modes. For a Host write operation, these registers must be written with the new values to be subsequently transferred to the AES Engine. OR These 128-bits are used to store the CKKM / IKKM value for f8 OR These 128-bits are used to store the CKKM / IKKM value for f9" range="31 - 0" rwaccess="R/W"/>
	</register>
	<register id="TIFS_AES38T_S_AES_KEY1_6" acronym="TIFS_AES38T_S_AES_KEY1_6" offset="0x20" width="32" description="">
		<bitfield id="KEY" width="32" begin="31" end="0" resetval="0x0" description="AES Key register. For a Host write operation, these registers must be written with the 128, 192 or 256-bit key for a subsequent AES operation. For a Host read operation, these registers return all-zeroes. The Host will typically write these registers in order, beginning with the AES_KEY_0 register. The key size (see the AES_MODE register) determines which key registers need to be populated, as indicated in the table below." range="31 - 0" rwaccess="R/W"/>
	</register>
	<register id="TIFS_AES38T_S_AES_KEY1_7" acronym="TIFS_AES38T_S_AES_KEY1_7" offset="0x24" width="32" description="">
		<bitfield id="KEY" width="32" begin="31" end="0" resetval="0x0" description="AES Key register. For a Host write operation, these registers must be written with the 128, 192 or 256-bit key for a subsequent AES operation. For a Host read operation, these registers return all-zeroes. The Host will typically write these registers in order, beginning with the AES_KEY_0 register. The key size (see the AES_MODE register) determines which key registers need to be populated, as indicated in the table below." range="31 - 0" rwaccess="R/W"/>
	</register>
	<register id="TIFS_AES38T_S_AES_KEY1_4" acronym="TIFS_AES38T_S_AES_KEY1_4" offset="0x28" width="32" description="">
		<bitfield id="KEY" width="32" begin="31" end="0" resetval="0x0" description="AES Key register. For a Host write operation, these registers must be written with the 128, 192 or 256-bit key for a subsequent AES operation. For a Host read operation, these registers return all-zeroes. The Host will typically write these registers in order, beginning with the AES_KEY_0 register. The key size (see the AES_MODE register) determines which key registers need to be populated, as indicated in the table below." range="31 - 0" rwaccess="R/W"/>
	</register>
	<register id="TIFS_AES38T_S_AES_KEY1_5" acronym="TIFS_AES38T_S_AES_KEY1_5" offset="0x2C" width="32" description="">
		<bitfield id="KEY" width="32" begin="31" end="0" resetval="0x0" description="AES Key register. For a Host write operation, these registers must be written with the 128, 192 or 256-bit key for a subsequent AES operation. For a Host read operation, these registers return all-zeroes. The Host will typically write these registers in order, beginning with the AES_KEY_0 register. The key size (see the AES_MODE register) determines which key registers need to be populated, as indicated in the table below." range="31 - 0" rwaccess="R/W"/>
	</register>
	<register id="TIFS_AES38T_S_AES_KEY1_2" acronym="TIFS_AES38T_S_AES_KEY1_2" offset="0x30" width="32" description="">
		<bitfield id="KEY" width="32" begin="31" end="0" resetval="0x0" description="AES Key register. For a Host write operation, these registers must be written with the 128, 192 or 256-bit key for a subsequent AES operation. For a Host read operation, these registers return all-zeroes. The Host will typically write these registers in order, beginning with the AES_KEY_0 register. The key size (see the AES_MODE register) determines which key registers need to be populated, as indicated in the table below." range="31 - 0" rwaccess="R/W"/>
	</register>
	<register id="TIFS_AES38T_S_AES_KEY1_3" acronym="TIFS_AES38T_S_AES_KEY1_3" offset="0x34" width="32" description="">
		<bitfield id="KEY" width="32" begin="31" end="0" resetval="0x0" description="AES Key register. For a Host write operation, these registers must be written with the 128, 192 or 256-bit key for a subsequent AES operation. For a Host read operation, these registers return all-zeroes. The Host will typically write these registers in order, beginning with the AES_KEY_0 register. The key size (see the AES_MODE register) determines which key registers need to be populated, as indicated in the table below." range="31 - 0" rwaccess="R/W"/>
	</register>
	<register id="TIFS_AES38T_S_AES_KEY1_0" acronym="TIFS_AES38T_S_AES_KEY1_0" offset="0x38" width="32" description="">
		<bitfield id="KEY" width="32" begin="31" end="0" resetval="0x0" description="AES Key register. For a Host write operation, these registers must be written with the 128, 192 or 256-bit key for a subsequent AES operation. For a Host read operation, these registers return all-zeroes. The Host will typically write these registers in order, beginning with the AES_KEY_0 register. The key size (see the AES_MODE register) determines which key registers need to be populated, as indicated in the table below." range="31 - 0" rwaccess="R/W"/>
	</register>
	<register id="TIFS_AES38T_S_AES_KEY1_1" acronym="TIFS_AES38T_S_AES_KEY1_1" offset="0x3C" width="32" description="">
		<bitfield id="KEY" width="32" begin="31" end="0" resetval="0x0" description="AES Key register. For a Host write operation, these registers must be written with the 128, 192 or 256-bit key for a subsequent AES operation. For a Host read operation, these registers return all-zeroes. The Host will typically write these registers in order, beginning with the AES_KEY_0 register. The key size (see the AES_MODE register) determines which key registers need to be populated, as indicated in the table below." range="31 - 0" rwaccess="R/W"/>
	</register>
	<register id="TIFS_AES38T_S_AES_IV_IN_0" acronym="TIFS_AES38T_S_AES_IV_IN_0" offset="0x40" width="32" description="">
		<bitfield id="DATA" width="32" begin="31" end="0" resetval="0x0" description="For a Host write operation, these registers must be written with the new 128-bit IV to be subsequently transferred to the AES Engine. For a Host read operation, these registers contain the latest 128-bit IV output by the AES Engine. This value is incremented with 0x1, after first use when a new data block is submitted to the engine if CTR/ICM mode is selected. OR For XTS mode, this register must be written with the tweak location (_i_) of the data unit or (intermediate) tweak value (Tj), For a Host read operation, the IV_OUT register holds the next tweak value that is used for the next data block provided via the DATA_IN registers. This value can be re-used for continuation with the next block. It must be provide together with a _j_ of _0_ via the IV_IN registers. OR For f8 this field must be written with zeroes. OR (In case of GCM) For a Host write operation, these registers must be written with the new 128-bit IV to be subsequently transferred to the AES Engine. For a Host read operation, these registers contain the latest 128-bit IV output by the AES Engine. Note that bits [127:96] of the IV represent the initial counter value (which is _1_ for GCM) and must therefore be initialized to 0x01000000. This value is incremented with 0x1, after first use when a new data block is submitted to the engine. OR  For CCM this field must be written with A0, this value constist of the concatenation of: A0-flags (5-bits of zero and 3-bits _L_), Nonce and counter value. _L_ must be a copy from the _L_ value of the AES_CTRL register. This _L_ indicates the width of the Nonce and counter. The loaded counter must be initialized to zero. The total width of A0 is 128-bit." range="31 - 0" rwaccess="R/W"/>
	</register>
	<register id="TIFS_AES38T_S_AES_IV_IN_1" acronym="TIFS_AES38T_S_AES_IV_IN_1" offset="0x44" width="32" description="">
		<bitfield id="DATA" width="32" begin="31" end="0" resetval="0x0" description="For a Host write operation, these registers must be written with the new 128-bit IV to be subsequently transferred to the AES Engine. For a Host read operation, these registers contain the latest 128-bit IV output by the AES Engine. This value is incremented with 0x1, after first use when a new data block is submitted to the engine if CTR/ICM mode is selected. OR For XTS mode, this register must be written with the tweak location (_i_) of the data unit or (intermediate) tweak value (Tj), For a Host read operation, the IV_OUT register holds the next tweak value that is used for the next data block provided via the DATA_IN registers. This value can be re-used for continuation with the next block. It must be provide together with a _j_ of _0_ via the IV_IN registers. OR For f8 this field must be written with zeroes. OR (In case of GCM) For a Host write operation, these registers must be written with the new 128-bit IV to be subsequently transferred to the AES Engine. For a Host read operation, these registers contain the latest 128-bit IV output by the AES Engine. Note that bits [127:96] of the IV represent the initial counter value (which is _1_ for GCM) and must therefore be initialized to 0x01000000. This value is incremented with 0x1, after first use when a new data block is submitted to the engine. OR  For CCM this field must be written with A0, this value constist of the concatenation of: A0-flags (5-bits of zero and 3-bits _L_), Nonce and counter value. _L_ must be a copy from the _L_ value of the AES_CTRL register. This _L_ indicates the width of the Nonce and counter. The loaded counter must be initialized to zero. The total width of A0 is 128-bit." range="31 - 0" rwaccess="R/W"/>
	</register>
	<register id="TIFS_AES38T_S_AES_IV_IN_2" acronym="TIFS_AES38T_S_AES_IV_IN_2" offset="0x48" width="32" description="">
		<bitfield id="DATA" width="32" begin="31" end="0" resetval="0x0" description="For a Host write operation, these registers must be written with the new 128-bit IV to be subsequently transferred to the AES Engine. For a Host read operation, these registers contain the latest 128-bit IV output by the AES Engine. This value is incremented with 0x1, after first use when a new data block is submitted to the engine if CTR/ICM mode is selected. OR For XTS mode, this register must be written with the tweak location (_i_) of the data unit or (intermediate) tweak value (Tj), For a Host read operation, the IV_OUT register holds the next tweak value that is used for the next data block provided via the DATA_IN registers. This value can be re-used for continuation with the next block. It must be provide together with a _j_ of _0_ via the IV_IN registers. OR For f8 this field must be written with zeroes. OR (In case of GCM) For a Host write operation, these registers must be written with the new 128-bit IV to be subsequently transferred to the AES Engine. For a Host read operation, these registers contain the latest 128-bit IV output by the AES Engine. Note that bits [127:96] of the IV represent the initial counter value (which is _1_ for GCM) and must therefore be initialized to 0x01000000. This value is incremented with 0x1, after first use when a new data block is submitted to the engine. OR  For CCM this field must be written with A0, this value constist of the concatenation of: A0-flags (5-bits of zero and 3-bits _L_), Nonce and counter value. _L_ must be a copy from the _L_ value of the AES_CTRL register. This _L_ indicates the width of the Nonce and counter. The loaded counter must be initialized to zero. The total width of A0 is 128-bit." range="31 - 0" rwaccess="R/W"/>
	</register>
	<register id="TIFS_AES38T_S_AES_IV_IN_3" acronym="TIFS_AES38T_S_AES_IV_IN_3" offset="0x4C" width="32" description="">
		<bitfield id="DATA" width="32" begin="31" end="0" resetval="0x0" description="For a Host write operation, these registers must be written with the new 128-bit IV to be subsequently transferred to the AES Engine. For a Host read operation, these registers contain the latest 128-bit IV output by the AES Engine. This value is incremented with 0x1, after first use when a new data block is submitted to the engine if CTR/ICM mode is selected. OR For XTS mode, this register must be written with the tweak location (_i_) of the data unit or (intermediate) tweak value (Tj), For a Host read operation, the IV_OUT register holds the next tweak value that is used for the next data block provided via the DATA_IN registers. This value can be re-used for continuation with the next block. It must be provide together with a _j_ of _0_ via the IV_IN registers. OR For f8 this field must be written with zeroes. OR (In case of GCM) For a Host write operation, these registers must be written with the new 128-bit IV to be subsequently transferred to the AES Engine. For a Host read operation, these registers contain the latest 128-bit IV output by the AES Engine. Note that bits [127:96] of the IV represent the initial counter value (which is _1_ for GCM) and must therefore be initialized to 0x01000000. This value is incremented with 0x1, after first use when a new data block is submitted to the engine. OR  For CCM this field must be written with A0, this value constist of the concatenation of: A0-flags (5-bits of zero and 3-bits _L_), Nonce and counter value. _L_ must be a copy from the _L_ value of the AES_CTRL register. This _L_ indicates the width of the Nonce and counter. The loaded counter must be initialized to zero. The total width of A0 is 128-bit." range="31 - 0" rwaccess="R/W"/>
	</register>
	<register id="TIFS_AES38T_S_AES_CTRL" acronym="TIFS_AES38T_S_AES_CTRL" offset="0x50" width="32" description="">
		<bitfield id="CTXTRDY" width="1" begin="31" end="31" resetval="0x1" description="Context Data Registers Ready Value Description 0         The context data registers are not ready to be overwritten. 1         The context data registers can be overwritten and the host is permitted to write             the next context." range="31" rwaccess="R/W"/> 
		<bitfield id="SVCTXTRDY" width="1" begin="30" end="30" resetval="0x0" description="AES TAG/IV Block(s) Ready This bit is only asserted if the SAVE_CONTEXT bit is set to 1. This bit is mutual exclusive with the CTXTRDY bit. Value Description 0         AES authentication TAG and/or IV block(s) is/are not available. 1         Indicates the AES authentication TAG and /or IV block(s) is/are available for the host to retrieve. " range="30" rwaccess="R/W"/> 
		<bitfield id="SAVE_CONTEXT" width="1" begin="29" end="29" resetval="0x0" description="TAG or Result IV Save If this bit is set, the CONTEXT_OUT interrupt bit is set in the AES_IRQSTATUS register if the operation is finished and related signals are enabled. Value Description 0         No effect. 1         Indicates an authentication TAG of result IV needs to be stored as a result context." range="29" rwaccess="R/W"/> 
		<bitfield id="CCM_M" width="3" begin="24" end="22" resetval="0x0" description="Counter with CBC-MAC (CCM)Defines M which indicates the length of the authentication field for CCM operations; the authentication field length equals two times the sum of CCM-M plus one. The AES Engine always returns a 128-bit authentication field, of which the M least significant bytes are valid. All values are supported." range="24 - 22" rwaccess="R/W"/> 
		<bitfield id="CCM_L" width="3" begin="21" end="19" resetval="0x0" description="Indicates the width of the length field for CCM operations; the length field in bytes equals the value of CMM-L plus one. Supported values for L are: Value        Description 0x0            width = 0 0x1            width = 2 0x2            reserved 0x3            width = 4 0x4 - 0x6  reserved 0x7            width = 8" range="21 - 19" rwaccess="R/W"/> 
		<bitfield id="CCM" width="1" begin="18" end="18" resetval="0x0" description="AES-CCM Mode Enable Value Description 0         AES-CCM mode is not enabled. 1         AES-CCM mode enabled. This is a combined mode, using AES for both authentication            and encryption. No additional mode selection is required." range="18" rwaccess="R/W"/> 
		<bitfield id="GCM" width="2" begin="17" end="16" resetval="0x0" description="AES-GCM Mode Enable This is a combined mode, using the Galois field-multiplier GF(2^128) for authentication and AES-CTR mode for encryption; the bits specify the GCM mode. Value Description 0x0     No operation 0x1     GHASH with H loaded and Y0-encrypted forced to zero 0x2     GHASH with H loaded and Y0-encrypted calculated internally 0x3     Autonomous GHASH (both H and Y0-encrypted calculated internally)" range="17 - 16" rwaccess="R/W"/> 
		<bitfield id="CBCMAC" width="1" begin="15" end="15" resetval="0x0" description="AES-CBC MAC Enable The DIRECTION bit must be set to 1 for this mode. Value Description 0         AES-CBC MAC mode is not enabled. 1         AES-CBC MAC mode enabled." range="15" rwaccess="R/W"/> 
		<bitfield id="F9" width="1" begin="14" end="14" resetval="0x0" description="AES f9 Mode Enable The AES key size must be set to 128-bit for this mode. Value Description 0         f9 mode is not enabled 1         f9 mode is enabled." range="14" rwaccess="R/W"/> 
		<bitfield id="F8" width="1" begin="13" end="13" resetval="0x0" description="AES f8 Mode Enable, The KEY_SIZE must be set to 128-bit for this mode. Value Description 0         AES f8 mode is not enabled. 1         AES  f8 mode is enabled." range="13" rwaccess="R/W"/> 
		<bitfield id="XTS" width="2" begin="12" end="11" resetval="0x0" description="AES-XTS Operation Enable The bits specify the XTS mode. Value Description 0x0     No operation 0x1     Previous/intermediate tweak value and j loaded (value is loaded via IV, j is             loaded via the AAD length register) 0x2     Key2, n and j are loaded (n is loaded via IV, j is loaded via the AAD length             register) 0x3    Key2 and n are loaded; j=0 (n is loaded via IV)" range="12 - 11" rwaccess="R/W"/> 
		<bitfield id="CFB" width="1" begin="10" end="10" resetval="0x0" description="Full block AES cipher feedback mode (CFB128) Enable Value Description 0         AES-CFB mode is not enabled. 1         AES-CFB mode is enabled." range="10" rwaccess="R/W"/> 
		<bitfield id="ICM" width="1" begin="9" end="9" resetval="0x0" description="AES Integer Counter Mode (ICM) Enable  This is a counter mode with a 16-bit wide counter. Value Description 0         AES-ICM mode is not enabled. 1         AES-ICM mode is enabled." range="9" rwaccess="R/W"/> 
		<bitfield id="CTR_WIDTH" width="2" begin="8" end="7" resetval="0x0" description="AES-CTR Mode Counter Width Value Description 0x0     Counter is 32 bits 0x1     Counter is 64 bits 0x2     Counter is 96 bits 0x3     Counter is 128 bits" range="8 - 7" rwaccess="R/W"/> 
		<bitfield id="CTR" width="1" begin="6" end="6" resetval="0x0" description="Counter Mode This bit must also be set for GCM and CCM mode, when encryption/decryption is required. Value Description 0         Counter mode is not enabled. 1         Counter mode is enabled." range="6" rwaccess="R/W"/> 
		<bitfield id="MODE" width="1" begin="5" end="5" resetval="0x0" description="ECB/CBC Mode Value Description 0         ECB mode 1         CBC mode" range="5" rwaccess="R/W"/> 
		<bitfield id="KEY_SIZE" width="2" begin="4" end="3" resetval="0x0" description="Key Size Value Description 0x0     reserved 0x1     Key is 128 bits 0x2     Key is 192 bits 0x3     Key is 256 bits" range="4 - 3" rwaccess="R/W"/> 
		<bitfield id="DIRECTION" width="1" begin="2" end="2" resetval="0x0" description="Encryption/Decryption Selection  If set to =1, an encrypt operation is performed.  If set to 0, a decrypt operation is performed. DIRECTION Value Description 0         Decryption is selected. 1         Encryption is selected." range="2" rwaccess="R/W"/> 
		<bitfield id="INPUT_READY" width="1" begin="1" end="1" resetval="0x0" description="Input Ready Status Value Description 0         Input buffer is not empty. 1         Indicates that the 16-byte input buffer is empty, and the host is permitted to            write the next block of data." range="1" rwaccess="R/W"/> 
		<bitfield id="OUTPUT_READY" width="1" begin="0" end="0" resetval="0x0" description="Output Ready Status Value Description 0         No AES output block is available. 1         An AES output block is available for the host to retrieve." range="0" rwaccess="R/W"/>
	</register>
	<register id="TIFS_AES38T_S_AES_C_LENGTH_0" acronym="TIFS_AES38T_S_AES_C_LENGTH_0" offset="0x54" width="32" description="">
		<bitfield id="LENGTH" width="32" begin="31" end="0" resetval="0x0" description="Bits [60:0] of the crypto length registers (LSW and MSW) store the cryptographic data length in bytes for all modes. Once processing with this context is started, this length decrements to zero. Data lengths up to (2^61 - 1) bytes are allowed. For GCM, any value up to 2^36 - 32 bytes can be used. This is because a 32-bit counter mode is used; the maximum number of 128-bit blocks is 2^32 - 2, resulting in a maximum number of bytes of 2^36 - 32. A write to this register triggers the engine to start using this context. This is valid for all modes except GCM and CCM. Note that for the combined modes, this length does not include the authentication only data; the authentication length is specified in the AES_AUTH_LENGTH register below. All modes must have a length > 0. For the combined modes, it is allowed to have one of the lengths equal to zero. For the basic encryption modes (ECB/CBC/CTR/ICM/CFB128) it is allowed to program zero to the length field; in that case the length is assumed infinite. All data must be byte (8-bit) aligned for stream cipher modes; bit aligned data streams are not supported by the AES Engine. For block cipher modes, the data length must be programmed in multiples of the block cipher size, 16 bytes. For a Host read operation, these registers return all-zeroes." range="31 - 0" rwaccess="R/W"/>
	</register>
	<register id="TIFS_AES38T_S_AES_C_LENGTH_1" acronym="TIFS_AES38T_S_AES_C_LENGTH_1" offset="0x58" width="32" description="">
		<bitfield id="LENGTH" width="32" begin="31" end="0" resetval="0x0" description="Bits [60:0] of the crypto length registers (LSW and MSW) store the cryptographic data length in bytes for all modes. Once processing with this context is started, this length decrements to zero. Data lengths up to (2^61 - 1) bytes are allowed. For GCM, any value up to 2^36 - 32 bytes can be used. This is because a 32-bit counter mode is used; the maximum number of 128-bit blocks is 2^32 - 2, resulting in a maximum number of bytes of 2^36 - 32. A write to this register triggers the engine to start using this context. This is valid for all modes except GCM and CCM. Note that for the combined modes, this length does not include the authentication only data; the authentication length is specified in the AES_AUTH_LENGTH register below. All modes must have a length > 0. For the combined modes, it is allowed to have one of the lengths equal to zero. For the basic encryption modes (ECB/CBC/CTR/ICM/CFB128) it is allowed to program zero to the length field; in that case the length is assumed infinite. All data must be byte (8-bit) aligned for stream cipher modes; bit aligned data streams are not supported by the AES Engine. For block cipher modes, the data length must be programmed in multiples of the block cipher size, 16 bytes. For a Host read operation, these registers return all-zeroes." range="31 - 0" rwaccess="R/W"/>
	</register>
	<register id="TIFS_AES38T_S_AES_AUTH_LENGTH" acronym="TIFS_AES38T_S_AES_AUTH_LENGTH" offset="0x5C" width="32" description="">
		<bitfield id="AUTH" width="32" begin="31" end="0" resetval="0x0" description="Bits [31:0] of the authentication length register store the authentication data length in bytes for combined modes only (GCM or CCM) Supported AAD-lengths for CCM are from 0 to (2^16 - 2^8) bytes. For GCM any value up to (2^32 - 1) bytes can be used. Once processing with this context is started, this length decrements to zero. A write to this register triggers the engine to start using this context for GCM and CCM. For XTS this register is optionally used to load _j_. Loading of _j_ is only required if _j_ != 0. _j_ is a 28-bit value and must be written to bits [31-4] of this register. _j_ represents the sequential number of the 128-bit block inside the data unit. For the first block in a unit, this value is zero. It is not required to provide a _j_ for each new data block within a unit. Note that it is possible to start with a _j_ unequal to zero; refer to Table 4 for more details. For a Host read operation, these registers return all-zeroes." range="31 - 0" rwaccess="R/W"/>
	</register>
	<register id="TIFS_AES38T_S_AES_DATA_IN_OUT_0" acronym="TIFS_AES38T_S_AES_DATA_IN_OUT_0" offset="0x60" width="32" description="">
		<bitfield id="DATA" width="32" begin="31" end="0" resetval="0x0" description="The Data Input/Output Registers buffer the input/output data blocks to/from the AES Engine. Notice that the data input buffer (AES_DATA_IN_n) and data output buffer (AES_DATA_OUT_n) are mapped to the same address locations. Writes to these addresses load the Input Buffer while reads pull from the Output Buffer. Therefore, for write access, the data input buffer is written; for read access, the data output buffer is read. The data input buffer must be written prior to starting an operation. The data output buffer contains valid data on completion of an operation. All writes from, and reads to, these registers are tracked independently per direction and HIB. Therefore, any 128-bit data block can be split over multiple 32-bit word transfers, which can be mixed with other transfers over the external interface." range="31 - 0" rwaccess="R/W"/>
	</register>
	<register id="TIFS_AES38T_S_AES_DATA_IN_OUT_1" acronym="TIFS_AES38T_S_AES_DATA_IN_OUT_1" offset="0x64" width="32" description="">
		<bitfield id="DATA" width="32" begin="31" end="0" resetval="0x0" description="The Data Input/Output Registers buffer the input/output data blocks to/from the AES Engine. Notice that the data input buffer (AES_DATA_IN_n) and data output buffer (AES_DATA_OUT_n) are mapped to the same address locations. Writes to these addresses load the Input Buffer while reads pull from the Output Buffer. Therefore, for write access, the data input buffer is written; for read access, the data output buffer is read. The data input buffer must be written prior to starting an operation. The data output buffer contains valid data on completion of an operation. All writes from, and reads to, these registers are tracked independently per direction and HIB. Therefore, any 128-bit data block can be split over multiple 32-bit word transfers, which can be mixed with other transfers over the external interface." range="31 - 0" rwaccess="R/W"/>
	</register>
	<register id="TIFS_AES38T_S_AES_DATA_IN_OUT_2" acronym="TIFS_AES38T_S_AES_DATA_IN_OUT_2" offset="0x68" width="32" description="">
		<bitfield id="DATA" width="32" begin="31" end="0" resetval="0x0" description="The Data Input/Output Registers buffer the input/output data blocks to/from the AES Engine. Notice that the data input buffer (AES_DATA_IN_n) and data output buffer (AES_DATA_OUT_n) are mapped to the same address locations. Writes to these addresses load the Input Buffer while reads pull from the Output Buffer. Therefore, for write access, the data input buffer is written; for read access, the data output buffer is read. The data input buffer must be written prior to starting an operation. The data output buffer contains valid data on completion of an operation. All writes from, and reads to, these registers are tracked independently per direction and HIB. Therefore, any 128-bit data block can be split over multiple 32-bit word transfers, which can be mixed with other transfers over the external interface." range="31 - 0" rwaccess="R/W"/>
	</register>
	<register id="TIFS_AES38T_S_AES_DATA_IN_OUT_3" acronym="TIFS_AES38T_S_AES_DATA_IN_OUT_3" offset="0x6C" width="32" description="">
		<bitfield id="DATA" width="32" begin="31" end="0" resetval="0x0" description="The Data Input/Output Registers buffer the input/output data blocks to/from the AES Engine. Notice that the data input buffer (AES_DATA_IN_n) and data output buffer (AES_DATA_OUT_n) are mapped to the same address locations. Writes to these addresses load the Input Buffer while reads pull from the Output Buffer. Therefore, for write access, the data input buffer is written; for read access, the data output buffer is read. The data input buffer must be written prior to starting an operation. The data output buffer contains valid data on completion of an operation. All writes from, and reads to, these registers are tracked independently per direction and HIB. Therefore, any 128-bit data block can be split over multiple 32-bit word transfers, which can be mixed with other transfers over the external interface." range="31 - 0" rwaccess="R/W"/>
	</register>
	<register id="TIFS_AES38T_S_AES_TAG_OUT_0" acronym="TIFS_AES38T_S_AES_TAG_OUT_0" offset="0x70" width="32" description="">
		<bitfield id="HASH" width="32" begin="31" end="0" resetval="0x0" description="Bits [31:0] of the AES TAG registers store the authentication value for the combined and authentication only modes. For a Host read operation, these registers contain the last 128-bit TAG output of the AES Engine; the TAG is available until the next context is written. This register will only contain valid data if the TAG is available, when the _store_ready_ bit from AES_CTRL register is set. During processing or for operations/modes that do not return a TAG, reads from this register returns data from the IV register. For operations that do return a TAG in the IV register (e.g. XTS), the IV register must be accessed directly." range="31 - 0" rwaccess="R/W"/>
	</register>
	<register id="TIFS_AES38T_S_AES_TAG_OUT_1" acronym="TIFS_AES38T_S_AES_TAG_OUT_1" offset="0x74" width="32" description="">
		<bitfield id="HASH" width="32" begin="31" end="0" resetval="0x0" description="Bits [31:0] of the AES TAG registers store the authentication value for the combined and authentication only modes. For a Host read operation, these registers contain the last 128-bit TAG output of the AES Engine; the TAG is available until the next context is written. This register will only contain valid data if the TAG is available, when the _store_ready_ bit from AES_CTRL register is set. During processing or for operations/modes that do not return a TAG, reads from this register returns data from the IV register. For operations that do return a TAG in the IV register (e.g. XTS), the IV register must be accessed directly." range="31 - 0" rwaccess="R/W"/>
	</register>
	<register id="TIFS_AES38T_S_AES_TAG_OUT_2" acronym="TIFS_AES38T_S_AES_TAG_OUT_2" offset="0x78" width="32" description="">
		<bitfield id="HASH" width="32" begin="31" end="0" resetval="0x0" description="Bits [31:0] of the AES TAG registers store the authentication value for the combined and authentication only modes. For a Host read operation, these registers contain the last 128-bit TAG output of the AES Engine; the TAG is available until the next context is written. This register will only contain valid data if the TAG is available, when the _store_ready_ bit from AES_CTRL register is set. During processing or for operations/modes that do not return a TAG, reads from this register returns data from the IV register. For operations that do return a TAG in the IV register (e.g. XTS), the IV register must be accessed directly." range="31 - 0" rwaccess="R/W"/>
	</register>
	<register id="TIFS_AES38T_S_AES_TAG_OUT_3" acronym="TIFS_AES38T_S_AES_TAG_OUT_3" offset="0x7C" width="32" description="">
		<bitfield id="HASH" width="32" begin="31" end="0" resetval="0x0" description="Bits [31:0] of the AES TAG registers store the authentication value for the combined and authentication only modes. For a Host read operation, these registers contain the last 128-bit TAG output of the AES Engine; the TAG is available until the next context is written. This register will only contain valid data if the TAG is available, when the _store_ready_ bit from AES_CTRL register is set. During processing or for operations/modes that do not return a TAG, reads from this register returns data from the IV register. For operations that do return a TAG in the IV register (e.g. XTS), the IV register must be accessed directly." range="31 - 0" rwaccess="R/W"/>
	</register>
	<register id="TIFS_AES38T_S_AES_REV" acronym="TIFS_AES38T_S_AES_REV" offset="0x80" width="32" description="">
		<bitfield id="REVISION" width="32" begin="31" end="0" resetval="0x65" description="Revision number" range="31 - 0" rwaccess="R/0"/>
	</register>
	<register id="TIFS_AES38T_S_AES_SYSCONFIG" acronym="TIFS_AES38T_S_AES_SYSCONFIG" offset="0x84" width="32" description="">
		<bitfield id="K3" width="1" begin="12" end="12" resetval="0x0" description="If this bit is set to zero, a regular cryptographic operation is performed. This bit may be set to one only if bit [4] of this register (direct_bus_en) and bit [11] of this register (key_enc) are cleared to zero. If this bit is one, the K3 (see description of bit [11]) key is used as key for the selected cryptographic operation. If this mode is selected, the key length is internally forced, using the internally stored kek_mode_len value (see description of bit [11]). Please refer to Appendix A.5 for details on the key selection mechanism. Note that for correct behavior of the core this bit should only be changed if the core is ready for a new context on the secure HIB." range="12" rwaccess="R/W"/> 
		<bitfield id="KEYENC" width="1" begin="11" end="11" resetval="0x0" description="If this bit is set to zero, a regular cryptographic operation is performed. This bit may be set to one only if bit [4] of this register (direct_bus_en) is cleared to zero. If this bit is 1, the K1 key is used for the selected crypto operation. The key length is forced, using the internally stored kek_mode_len value (see description of bit [10]). Depending on the internally stored kek_mode_id (see description of bit [10]), the following operations are possible: Stored kek_mode_id = 0: The selected encryption or decryption operation will be performed using K1 as key. The result data is provided in the data output register, as in a normal operation. Stored kek_mode_id = 1: The CBC mode will be forced, using a zero IV for the first block. Two cases must be distinguished: 1 If the selected operation is an encryption, the encrypted result is provided in the data output register, as it is a normal operation. 2 If the selected operation is a decryption, the decrypted result is automatically stored in a separate key register: to generate internal key K3. No output data is provided in this case; reading from the data output register returns zeroes. The key size of K3 is inherited from the K1 key size. The length value that was used to generate K1 is internally stored and used for the generation of K3. When K3 is generated, the kek_mode_len bits are stored with K3. The k3 mode, see bit [12], makes use of the stored kek_mode_len to assure that K3 is used with the proper length. Please refer to Appendix A.5 for details on the key selection mechanism. Note that for correct behavior of the core this bit should only be changed if the core is ready for a new context on the secure HIB." range="11" rwaccess="R/W"/> 
		<bitfield id="KEKMODE" width="1" begin="10" end="10" resetval="0x0" description="If this bit is zero, the direct key is used directly for the selected cryptographic operation, if it is selected by enabling bit [4] (direct_bus_en) of this register. If the direct key is not selected, a regular operation is performed. This bit may be set to one only if bit [4] of this register (direct_bus_en) is set to 1. If this bit is set to one while the direct key bit is selected, the direct key is XOR-ed with a predefined constant value9 before it is used as key for the cryptographic operation. If both bits are set to 1, the direction of the cryptographic operation is forced to CBC encryption (independent of the programmed direction in the AES_CTRL register). The result of the operation with this XOR-ed key is automatically stored in a separate key register: KEK K1. No output data is provided in this case; reading from the data output register returns zeroes. If this mode is selected, the cryptographic mode is internally forced to CBC. The desired K1 key size should be programmed with the kek_mode_len bits [16:15]. The kek_mode_id bit [14], selects the constant value to be XORed with the direct key. When K1 is generated, both the kek_mode_id and kek_mode_len bits are stored with K1. The key_enc mode, see bit [11], makes use of the stored kek_mode_id and kek_mode_len values to assure that K1 can only be used in the mode for where it was generated for. Please refer to Appendix A.5 for details on the key selection mechanism. Note that for correct behavior of the core, this bit should only be changed if the core is ready for a new context on the secure HIB in the AES_CTRL register. The result of the operation with this XOR-ed key is automatically stored in a separate internal key register (KEK). No output data             is provided in this case; reading from the data output             register returns zeroes.If this mode is selected, the cryptographic mode should be set to ECB             and the key size should be 128-bit. Note that for correct behavior of the core, this bit should only be changed if the core is ready for a new context" range="10" rwaccess="R/W"/> 
		<bitfield id="MAP_CONTEXT_OUT_ON_DATA_OUT" width="1" begin="9" end="9" resetval="0x0" description="If set to '1' the two context out requests (dma_req_context_out_en, Bit [8] above, and context_out interrupt enable, Bit [3] of AES_IRQENABLE register) are mapped on the corresponding data output request bit. In this case, the original _context out_ bit values are ignored. Therefore, when this bit is enabled and the dma_req_data_out_en (Bit [6]) is enabled, this DMA request is used for the context output and data output. Similarly if the data_out interrupt enable (Bit [2] of AES_IRQENABLE register) is enabled, this interrupt is used for context output and data output. Note that when context and data output request or interrupt are mapped on each other, the context output is always requested after the last data output." range="9" rwaccess="R/W"/> 
		<bitfield id="DMA_REQ_CONTEXT_OUT_EN" width="1" begin="8" end="8" resetval="0x0" description="DMA Request Context Out Enable  If set to 1, the DMA context output request is enabled (for context data out, for example, TAG for authentication modes).  Value Description 0         DMA disabled for context output request. 1         DMA enabled for context output request." range="8" rwaccess="R/W"/> 
		<bitfield id="DMA_REQ_CONTEXT_IN_EN" width="1" begin="7" end="7" resetval="0x0" description="DMA Request Context In Enable Value Description 0         DMA disabled for context input request. 1         DMA enabled for context input request." range="7" rwaccess="R/W"/> 
		<bitfield id="DMA_REQ_DATA_OUT_EN" width="1" begin="6" end="6" resetval="0x0" description="DMA Request Data Out Enable Value Description 0         DMA disabled for data output request. 1         DMA enabled for data output request." range="6" rwaccess="R/W"/> 
		<bitfield id="DMA_REQ_DATA_IN_EN" width="1" begin="5" end="5" resetval="0x0" description="DMA Request Data In Enable Value Description 0         DMA disabled for data input request. 1         DMA enabled for data input request." range="5" rwaccess="R/W"/> 
		<bitfield id="DIRECTBUSEN" width="1" begin="4" end="4" resetval="0x0" description="Direct Bus Enable Value Description 0        Use the key registers 1        Use the direct bus" range="4" rwaccess="R/W"/> 
		<bitfield id="SIDLE" width="2" begin="3" end="2" resetval="0x0" description="Target Idle Mode Value Description 0x0     Force-idle mode 0x1     No-idle 0x2     Smart-idle 0x3     reserved" range="3 - 2" rwaccess="R/W"/> 
		<bitfield id="SOFTRESET" width="1" begin="1" end="1" resetval="0x0" description="Soft reset Value Description 0         No operation 1        Start soft reset sequence" range="1" rwaccess="R/W"/> 
		<bitfield id="AUTOIDLE" width="1" begin="0" end="0" resetval="0x1" description="If set to 1, the internal clocks are switched off when there is no processing to be done. This bit is only available on the sHIB." range="0" rwaccess="R/W"/>
	</register>
	<register id="TIFS_AES38T_S_AES_SYSSTATUS" acronym="TIFS_AES38T_S_AES_SYSSTATUS" offset="0x88" width="32" description="">
		<bitfield id="RESETDONE" width="1" begin="0" end="0" resetval="0x1" description="Reset Done Value Description 0         Reset is not complete. 1         Reset is has completed." range="0" rwaccess="R/W"/>
	</register>
	<register id="TIFS_AES38T_S_AES_IRQSTATUS" acronym="TIFS_AES38T_S_AES_IRQSTATUS" offset="0x8C" width="32" description="">
		<bitfield id="CONTEXT_OUT" width="1" begin="3" end="3" resetval="0x0" description="Context Output Interrupt Status Value Description 0         Authentication tag (and IV) interrupt(s) is/are not active. 1         Authentication tag (and IV) interrupt(s) is/are active and the interrupt output has been triggered." range="3" rwaccess="R/W"/> 
		<bitfield id="DATA_OUT" width="1" begin="2" end="2" resetval="0x0" description="Data Out Interrupt Status Value Description 0         The data out interrupt is not active. 1         The data out interrupt is active and the interrupt output has been triggered." range="2" rwaccess="R/W"/> 
		<bitfield id="DATA_IN" width="1" begin="1" end="1" resetval="0x0" description="Data In Interrupt Status Value Description 0         The data in interrupt is not active. 1         The data in interrupt is active and the interrupt output has been triggered." range="1" rwaccess="R/W"/> 
		<bitfield id="CONTEXT_IN" width="1" begin="0" end="0" resetval="0x0" description="Context In Interrupt Status Value Description 0         The context in interrupt is not active. 1         The context in interrupt is active and the interrupt output has been             triggered." range="0" rwaccess="R/W"/>
	</register>
	<register id="TIFS_AES38T_S_AES_IRQENABLE" acronym="TIFS_AES38T_S_AES_IRQENABLE" offset="0x90" width="32" description="">
		<bitfield id="CONTEXT_OUT" width="1" begin="3" end="3" resetval="0x0" description="Context Out Interrupt Enable Value Description 0         Authentication tag (and IV) interrupt(s) is/are disabled. 1         Authentication tag (and IV) interrupt(s) is/are enabled." range="3" rwaccess="R/W"/> 
		<bitfield id="DATA_OUT" width="1" begin="2" end="2" resetval="0x0" description="Data Out Interrupt Enable Value Description 0         The data out interrupt is disabled. 1         The data out interrupt is enabled." range="2" rwaccess="R/W"/> 
		<bitfield id="DATA_IN" width="1" begin="1" end="1" resetval="0x0" description="Data In Interrupt Enable Value Description 0         The data in interrupt is disabled. 1         The data in interrupt is enabled." range="1" rwaccess="R/W"/> 
		<bitfield id="CONTEXT_IN" width="1" begin="0" end="0" resetval="0x0" description="Context In Interrupt Enable Value Description 0         The context in interrupt is disabled. 1         The context in interrupt is enabled." range="0" rwaccess="R/W"/>
	</register>
	<register id="TIFS_AES38T_S_AES_DIRTY_BITS" acronym="TIFS_AES38T_S_AES_DIRTY_BITS" offset="0x94" width="32" description="">
		<bitfield id="P_DIRTY" width="1" begin="3" end="3" resetval="0x0" description="This bit is set to 1 by the module if any of the AES_P_* registers is written." range="3" rwaccess="R/W"/> 
		<bitfield id="P_ACCESS" width="1" begin="2" end="2" resetval="0x0" description="This bit is set to 1 by the module if any of the AES_P_* registers is read." range="2" rwaccess="R/W"/> 
		<bitfield id="S_DIRTY" width="1" begin="1" end="1" resetval="0x0" description="AES Dirty Bit This bit must be written to a 1 to clear. Value Description 0         No AES registers have been written. 1         Indicates when any of the AES_x registers have been written (except for the AES_DIRTYBITS register)." range="1" rwaccess="R/W"/> 
		<bitfield id="S_ACCESS" width="1" begin="0" end="0" resetval="0x0" description="AES Access Bit This bit must be written to a 1 to clear. Value Description 0         No AES registers have been read. 1         Indicates when any of the AES_x registers have been read (except for the AES_DIRTYBITS register)." range="0" rwaccess="R/W"/>
	</register>
	<register id="TIFS_AES38T_S_AES_LOCKDOWN" acronym="TIFS_AES38T_S_AES_LOCKDOWN" offset="0x98" width="32" description="">
		<bitfield id="LENGTH_LOCK" width="1" begin="5" end="5" resetval="0x0" description="If set to 1 the pHIB length registers can not be written - this lock involves word address 0x54 up to 0x5C" range="5" rwaccess="R/W"/> 
		<bitfield id="CONTROL_LOCK" width="1" begin="4" end="4" resetval="0x0" description="If set to 1 the pHIB control register can not be written - this lock involves word address 0x50." range="4" rwaccess="R/W"/> 
		<bitfield id="IV_LOCK" width="1" begin="3" end="3" resetval="0x0" description="If set to 1 the pHIB IV registers cannot be written - this lock involves word addresses 0x40 up to 0x4C." range="3" rwaccess="R/W"/> 
		<bitfield id="KEY3_LOCK" width="1" begin="2" end="2" resetval="0x0" description="If set to 1 the pHIB key3 registers cannot be written - this lock involves word addresses 0x30 up to 0x3C." range="2" rwaccess="R/W"/> 
		<bitfield id="KEY2_LOCK" width="1" begin="1" end="1" resetval="0x0" description="If set to 1 the pHIB key2 registers cannot be written - this lock involves word addresses 0x20 up to 0x2C." range="1" rwaccess="R/W"/> 
		<bitfield id="KEY_LOCK" width="1" begin="0" end="0" resetval="0x0" description="If set to 1 the pHIB key registers cannot be written - this lock involves word addresses 0x00 up to 0x1C." range="0" rwaccess="R/W"/>
	</register>
	<register id="TIFS_AES38T_Reserved_1" acronym="TIFS_AES38T_Reserved_1" offset="0x9C" width="32" description="">
		<bitfield id="RESERVED_1" width="32" begin="31" end="0" resetval="0x0" description="" range="31 - 0" rwaccess="R"/>
	</register>
	<register id="TIFS_AES38T_S_X_CONFIG" acronym="TIFS_AES38T_S_X_CONFIG" offset="0xA4" width="32" description="Extra config register to speed up AES core">
		<bitfield id="SPEED_UP" width="1" begin="0" end="0" resetval="0x0" description="If set to 1, it enables faster AES engine" range="0" rwaccess="R/W"/>
	</register>
	<register id="TIFS_AES38T_P_AES_KEY2_6" acronym="TIFS_AES38T_P_AES_KEY2_6" offset="0x1000" width="32" description="">
		<bitfield id="P_AES_KEY2_6" width="32" begin="31" end="0" resetval="0x0" description="" range="31 - 0" rwaccess="R/W"/>
	</register>
	<register id="TIFS_AES38T_P_AES_KEY2_7" acronym="TIFS_AES38T_P_AES_KEY2_7" offset="0x1004" width="32" description="">
		<bitfield id="P_AES_KEY2_7" width="32" begin="31" end="0" resetval="0x0" description="" range="31 - 0" rwaccess="R/W"/>
	</register>
	<register id="TIFS_AES38T_P_AES_KEY2_4" acronym="TIFS_AES38T_P_AES_KEY2_4" offset="0x1008" width="32" description="">
		<bitfield id="P_AES_KEY2_4" width="32" begin="31" end="0" resetval="0x0" description="" range="31 - 0" rwaccess="R/W"/>
	</register>
	<register id="TIFS_AES38T_P_AES_KEY2_5" acronym="TIFS_AES38T_P_AES_KEY2_5" offset="0x100C" width="32" description="">
		<bitfield id="P_AES_KEY2_5" width="32" begin="31" end="0" resetval="0x0" description="" range="31 - 0" rwaccess="R/W"/>
	</register>
	<register id="TIFS_AES38T_P_AES_KEY2_2" acronym="TIFS_AES38T_P_AES_KEY2_2" offset="0x1010" width="32" description="">
		<bitfield id="P_AES_KEY2_2" width="32" begin="31" end="0" resetval="0x0" description="" range="31 - 0" rwaccess="R/W"/>
	</register>
	<register id="TIFS_AES38T_P_AES_KEY2_3" acronym="TIFS_AES38T_P_AES_KEY2_3" offset="0x1014" width="32" description="">
		<bitfield id="P_AES_KEY2_3" width="32" begin="31" end="0" resetval="0x0" description="" range="31 - 0" rwaccess="R/W"/>
	</register>
	<register id="TIFS_AES38T_P_AES_KEY2_0" acronym="TIFS_AES38T_P_AES_KEY2_0" offset="0x1018" width="32" description="">
		<bitfield id="P_AES_KEY2_0" width="32" begin="31" end="0" resetval="0x0" description="" range="31 - 0" rwaccess="R/W"/>
	</register>
	<register id="TIFS_AES38T_P_AES_KEY2_1" acronym="TIFS_AES38T_P_AES_KEY2_1" offset="0x101C" width="32" description="">
		<bitfield id="P_AES_KEY2_1" width="32" begin="31" end="0" resetval="0x0" description="" range="31 - 0" rwaccess="R/W"/>
	</register>
	<register id="TIFS_AES38T_P_AES_KEY1_6" acronym="TIFS_AES38T_P_AES_KEY1_6" offset="0x1020" width="32" description="">
		<bitfield id="P_AES_KEY1_6" width="32" begin="31" end="0" resetval="0x0" description="" range="31 - 0" rwaccess="R/W"/>
	</register>
	<register id="TIFS_AES38T_P_AES_KEY1_7" acronym="TIFS_AES38T_P_AES_KEY1_7" offset="0x1024" width="32" description="">
		<bitfield id="P_AES_KEY1_7" width="32" begin="31" end="0" resetval="0x0" description="" range="31 - 0" rwaccess="R/W"/>
	</register>
	<register id="TIFS_AES38T_P_AES_KEY1_4" acronym="TIFS_AES38T_P_AES_KEY1_4" offset="0x1028" width="32" description="">
		<bitfield id="P_AES_KEY1_4" width="32" begin="31" end="0" resetval="0x0" description="" range="31 - 0" rwaccess="R/W"/>
	</register>
	<register id="TIFS_AES38T_P_AES_KEY1_5" acronym="TIFS_AES38T_P_AES_KEY1_5" offset="0x102C" width="32" description="">
		<bitfield id="P_AES_KEY1_5" width="32" begin="31" end="0" resetval="0x0" description="" range="31 - 0" rwaccess="R/W"/>
	</register>
	<register id="TIFS_AES38T_P_AES_KEY1_2" acronym="TIFS_AES38T_P_AES_KEY1_2" offset="0x1030" width="32" description="">
		<bitfield id="P_AES_KEY1_2" width="32" begin="31" end="0" resetval="0x0" description="" range="31 - 0" rwaccess="R/W"/>
	</register>
	<register id="TIFS_AES38T_P_AES_KEY1_3" acronym="TIFS_AES38T_P_AES_KEY1_3" offset="0x1034" width="32" description="">
		<bitfield id="P_AES_KEY1_3" width="32" begin="31" end="0" resetval="0x0" description="" range="31 - 0" rwaccess="R/W"/>
	</register>
	<register id="TIFS_AES38T_P_AES_KEY1_0" acronym="TIFS_AES38T_P_AES_KEY1_0" offset="0x1038" width="32" description="">
		<bitfield id="P_AES_KEY1_0" width="32" begin="31" end="0" resetval="0x0" description="" range="31 - 0" rwaccess="R/W"/>
	</register>
	<register id="TIFS_AES38T_P_AES_KEY1_1" acronym="TIFS_AES38T_P_AES_KEY1_1" offset="0x103C" width="32" description="">
		<bitfield id="P_AES_KEY1_1" width="32" begin="31" end="0" resetval="0x0" description="" range="31 - 0" rwaccess="R/W"/>
	</register>
	<register id="TIFS_AES38T_P_AES_IV_IN_0" acronym="TIFS_AES38T_P_AES_IV_IN_0" offset="0x1040" width="32" description="">
		<bitfield id="P_AES_IV_IN_0" width="32" begin="31" end="0" resetval="0x0" description="" range="31 - 0" rwaccess="R/W"/>
	</register>
	<register id="TIFS_AES38T_P_AES_IV_IN_1" acronym="TIFS_AES38T_P_AES_IV_IN_1" offset="0x1044" width="32" description="">
		<bitfield id="P_AES_IV_IN_1" width="32" begin="31" end="0" resetval="0x0" description="" range="31 - 0" rwaccess="R/W"/>
	</register>
	<register id="TIFS_AES38T_P_AES_IV_IN_2" acronym="TIFS_AES38T_P_AES_IV_IN_2" offset="0x1048" width="32" description="">
		<bitfield id="P_AES_IV_IN_2" width="32" begin="31" end="0" resetval="0x0" description="" range="31 - 0" rwaccess="R/W"/>
	</register>
	<register id="TIFS_AES38T_P_AES_IV_IN_3" acronym="TIFS_AES38T_P_AES_IV_IN_3" offset="0x104C" width="32" description="">
		<bitfield id="P_AES_IV_IN_3" width="32" begin="31" end="0" resetval="0x0" description="" range="31 - 0" rwaccess="R/W"/>
	</register>
	<register id="TIFS_AES38T_P_AES_CTRL" acronym="TIFS_AES38T_P_AES_CTRL" offset="0x1050" width="32" description="">
		<bitfield id="P_AES_CTRL" width="32" begin="31" end="0" resetval="0x0" description="" range="31 - 0" rwaccess="R/W"/>
	</register>
	<register id="TIFS_AES38T_P_AES_C_LENGTH_0" acronym="TIFS_AES38T_P_AES_C_LENGTH_0" offset="0x1054" width="32" description="">
		<bitfield id="P_AES_C_LENGTH_0" width="32" begin="31" end="0" resetval="0x0" description="" range="31 - 0" rwaccess="R/W"/>
	</register>
	<register id="TIFS_AES38T_P_AES_C_LENGTH_1" acronym="TIFS_AES38T_P_AES_C_LENGTH_1" offset="0x1058" width="32" description="">
		<bitfield id="P_AES_C_LENGTH_1" width="32" begin="31" end="0" resetval="0x0" description="" range="31 - 0" rwaccess="R/W"/>
	</register>
	<register id="TIFS_AES38T_P_AES_AUTH_LENGTH" acronym="TIFS_AES38T_P_AES_AUTH_LENGTH" offset="0x105C" width="32" description="">
		<bitfield id="P_AES_AUTH_LENGTH" width="32" begin="31" end="0" resetval="0x0" description="" range="31 - 0" rwaccess="R/W"/>
	</register>
	<register id="TIFS_AES38T_P_AES_DATA_IN_0" acronym="TIFS_AES38T_P_AES_DATA_IN_0" offset="0x1060" width="32" description="">
		<bitfield id="P_AES_DATA_IN_0" width="32" begin="31" end="0" resetval="0x0" description="" range="31 - 0" rwaccess="R/W"/>
	</register>
	<register id="TIFS_AES38T_P_AES_DATA_IN_1" acronym="TIFS_AES38T_P_AES_DATA_IN_1" offset="0x1064" width="32" description="">
		<bitfield id="P_AES_DATA_IN_1" width="32" begin="31" end="0" resetval="0x0" description="" range="31 - 0" rwaccess="R/W"/>
	</register>
	<register id="TIFS_AES38T_P_AES_DATA_IN_2" acronym="TIFS_AES38T_P_AES_DATA_IN_2" offset="0x1068" width="32" description="">
		<bitfield id="P_AES_DATA_IN_2" width="32" begin="31" end="0" resetval="0x0" description="" range="31 - 0" rwaccess="R/W"/>
	</register>
	<register id="TIFS_AES38T_P_AES_DATA_IN_3" acronym="TIFS_AES38T_P_AES_DATA_IN_3" offset="0x106C" width="32" description="">
		<bitfield id="P_AES_DATA_IN_3" width="32" begin="31" end="0" resetval="0x0" description="" range="31 - 0" rwaccess="R/W"/>
	</register>
	<register id="TIFS_AES38T_P_AES_TAG_OUT_0" acronym="TIFS_AES38T_P_AES_TAG_OUT_0" offset="0x1070" width="32" description="">
		<bitfield id="P_AES_TAG_OUT_0" width="32" begin="31" end="0" resetval="0x0" description="" range="31 - 0" rwaccess="R/W"/>
	</register>
	<register id="TIFS_AES38T_P_AES_TAG_OUT_1" acronym="TIFS_AES38T_P_AES_TAG_OUT_1" offset="0x1074" width="32" description="">
		<bitfield id="P_AES_TAG_OUT_1" width="32" begin="31" end="0" resetval="0x0" description="" range="31 - 0" rwaccess="R/W"/>
	</register>
	<register id="TIFS_AES38T_P_AES_TAG_OUT_2" acronym="TIFS_AES38T_P_AES_TAG_OUT_2" offset="0x1078" width="32" description="">
		<bitfield id="P_AES_TAG_OUT_2" width="32" begin="31" end="0" resetval="0x0" description="" range="31 - 0" rwaccess="R/W"/>
	</register>
	<register id="TIFS_AES38T_P_AES_TAG_OUT_3" acronym="TIFS_AES38T_P_AES_TAG_OUT_3" offset="0x107C" width="32" description="">
		<bitfield id="P_AES_TAG_OUT_3" width="32" begin="31" end="0" resetval="0x0" description="" range="31 - 0" rwaccess="R/W"/>
	</register>
	<register id="TIFS_AES38T_P_AES_REV" acronym="TIFS_AES38T_P_AES_REV" offset="0x1080" width="32" description="">
		<bitfield id="P_AES_REV" width="32" begin="31" end="0" resetval="0x65" description="" range="31 - 0" rwaccess="R/0"/>
	</register>
	<register id="TIFS_AES38T_P_AES_SYSCONFIG" acronym="TIFS_AES38T_P_AES_SYSCONFIG" offset="0x1084" width="32" description="">
		<bitfield id="P_AES_SYSCONFIG" width="32" begin="31" end="0" resetval="0x0" description="" range="31 - 0" rwaccess="R/W"/>
	</register>
	<register id="TIFS_AES38T_P_AES_SYSSTATUS" acronym="TIFS_AES38T_P_AES_SYSSTATUS" offset="0x1088" width="32" description="">
		<bitfield id="P_AES_SYSSTATUS" width="32" begin="31" end="0" resetval="0x0" description="" range="31 - 0" rwaccess="R/W"/>
	</register>
	<register id="TIFS_AES38T_P_AES_IRQSTATUS" acronym="TIFS_AES38T_P_AES_IRQSTATUS" offset="0x108C" width="32" description="">
		<bitfield id="P_AES_IRQSTATUS" width="32" begin="31" end="0" resetval="0x0" description="" range="31 - 0" rwaccess="R/W"/>
	</register>
	<register id="TIFS_AES38T_P_AES_IRQENABLE" acronym="TIFS_AES38T_P_AES_IRQENABLE" offset="0x1090" width="32" description="">
		<bitfield id="P_AES_IRQENABLE" width="32" begin="31" end="0" resetval="0x0" description="" range="31 - 0" rwaccess="R/W"/>
	</register>
	<register id="TIFS_AES38T_Reserved_2" acronym="TIFS_AES38T_Reserved_2" offset="0x1094" width="32" description="">
		<bitfield id="RESERVED_2" width="32" begin="31" end="0" resetval="0x0" description="" range="31 - 0" rwaccess="R"/>
	</register>
	<register id="TIFS_AES38T_Reserved_3" acronym="TIFS_AES38T_Reserved_3" offset="0x1098" width="32" description="">
		<bitfield id="RESERVED_3" width="32" begin="31" end="0" resetval="0x0" description="" range="31 - 0" rwaccess="R"/>
	</register>
	<register id="TIFS_AES38T_Reserved_4" acronym="TIFS_AES38T_Reserved_4" offset="0x109C" width="32" description="">
		<bitfield id="RESERVED_4" width="32" begin="31" end="0" resetval="0x0" description="" range="31 - 0" rwaccess="R"/>
	</register>
</module>